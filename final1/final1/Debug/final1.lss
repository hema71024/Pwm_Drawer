
final1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  000024ac  00002540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800118  00800118  000025f8  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000646  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00004d40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be5  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cba  00000000  00000000  00007b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001004  00000000  00000000  000087bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  000097c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001133  00000000  00000000  00009e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd5  00000000  00000000  0000af83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000cb58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	19 04       	cpc	r1, r9
      56:	9c 04       	cpc	r9, r12
      58:	9c 04       	cpc	r9, r12
      5a:	9c 04       	cpc	r9, r12
      5c:	9c 04       	cpc	r9, r12
      5e:	f8 03       	fmulsu	r23, r16
      60:	9c 04       	cpc	r9, r12
      62:	9c 04       	cpc	r9, r12
      64:	9c 04       	cpc	r9, r12
      66:	9c 04       	cpc	r9, r12
      68:	9c 04       	cpc	r9, r12
      6a:	9c 04       	cpc	r9, r12
      6c:	9c 04       	cpc	r9, r12
      6e:	24 04       	cpc	r2, r4
      70:	0e 04       	cpc	r0, r14
      72:	9c 04       	cpc	r9, r12
      74:	2f 04       	cpc	r2, r15
      76:	3a 04       	cpc	r3, r10
      78:	45 04       	cpc	r4, r5
      7a:	50 04       	cpc	r5, r0
      7c:	5b 04       	cpc	r5, r11
      7e:	66 04       	cpc	r6, r6
      80:	71 04       	cpc	r7, r1
      82:	7c 04       	cpc	r7, r12
      84:	87 04       	cpc	r8, r7
      86:	92 04       	cpc	r9, r2
      88:	9c 04       	cpc	r9, r12
      8a:	9c 04       	cpc	r9, r12
      8c:	9c 04       	cpc	r9, r12
      8e:	03 04       	cpc	r0, r3
      90:	9c 04       	cpc	r9, r12
      92:	9c 04       	cpc	r9, r12
      94:	9c 04       	cpc	r9, r12
      96:	3d 03       	fmul	r19, r21
      98:	9c 04       	cpc	r9, r12
      9a:	8a 03       	fmulsu	r16, r18
      9c:	a0 03       	fmuls	r18, r16
      9e:	5e 03       	fmul	r21, r22
      a0:	48 03       	fmul	r20, r16
      a2:	9c 04       	cpc	r9, r12
      a4:	c1 03       	fmuls	r20, r17
      a6:	ed 03       	fmulsu	r22, r21
      a8:	9c 04       	cpc	r9, r12
      aa:	b6 03       	fmuls	r19, r22
      ac:	9c 04       	cpc	r9, r12
      ae:	d7 03       	fmuls	r21, r23
      b0:	7f 03       	fmul	r23, r23
      b2:	9c 04       	cpc	r9, r12
      b4:	9c 04       	cpc	r9, r12
      b6:	69 03       	fmul	r22, r17
      b8:	53 03       	mulsu	r21, r19
      ba:	e2 03       	fmuls	r22, r18
      bc:	ab 03       	fmulsu	r18, r19
      be:	74 03       	mulsu	r23, r20
      c0:	9c 04       	cpc	r9, r12
      c2:	9c 04       	cpc	r9, r12
      c4:	9c 04       	cpc	r9, r12
      c6:	95 03       	fmuls	r17, r21
      c8:	cc 03       	fmulsu	r20, r20
      ca:	9c 04       	cpc	r9, r12
      cc:	9c 04       	cpc	r9, r12
      ce:	9c 04       	cpc	r9, r12
      d0:	9c 04       	cpc	r9, r12
      d2:	9c 04       	cpc	r9, r12
      d4:	9c 04       	cpc	r9, r12
      d6:	3d 03       	fmul	r19, r21
      d8:	9c 04       	cpc	r9, r12
      da:	8a 03       	fmulsu	r16, r18
      dc:	a0 03       	fmuls	r18, r16
      de:	5e 03       	fmul	r21, r22
      e0:	48 03       	fmul	r20, r16
      e2:	9c 04       	cpc	r9, r12
      e4:	c1 03       	fmuls	r20, r17
      e6:	ed 03       	fmulsu	r22, r21
      e8:	9c 04       	cpc	r9, r12
      ea:	b6 03       	fmuls	r19, r22
      ec:	9c 04       	cpc	r9, r12
      ee:	d7 03       	fmuls	r21, r23
      f0:	7f 03       	fmul	r23, r23
      f2:	9c 04       	cpc	r9, r12
      f4:	9c 04       	cpc	r9, r12
      f6:	69 03       	fmul	r22, r17
      f8:	53 03       	mulsu	r21, r19
      fa:	e2 03       	fmuls	r22, r18
      fc:	ab 03       	fmulsu	r18, r19
      fe:	74 03       	mulsu	r23, r20
     100:	9c 04       	cpc	r9, r12
     102:	9c 04       	cpc	r9, r12
     104:	9c 04       	cpc	r9, r12
     106:	95 03       	fmuls	r17, r21
     108:	cc 03       	fmulsu	r20, r20

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	11 e0       	ldi	r17, 0x01	; 1
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	ec ea       	ldi	r30, 0xAC	; 172
     11e:	f4 e2       	ldi	r31, 0x24	; 36
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a8 31       	cpi	r26, 0x18	; 24
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a8 e1       	ldi	r26, 0x18	; 24
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a3 32       	cpi	r26, 0x23	; 35
     138:	b1 07       	cpc	r27, r17
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
     140:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <ICU_SetTriggerEdge>:
		default: break;
	}
}

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
	CLEAR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
     148:	9e b5       	in	r25, 0x2e	; 46
     14a:	9f 7b       	andi	r25, 0xBF	; 191
     14c:	9e bd       	out	0x2e, r25	; 46
	switch (Tmr_Channel) {
     14e:	88 23       	and	r24, r24
     150:	39 f4       	brne	.+14     	; 0x160 <ICU_SetTriggerEdge+0x18>
		case ICU_TIMER_1: *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT); break;
     152:	8e b5       	in	r24, 0x2e	; 46
     154:	62 95       	swap	r22
     156:	66 0f       	add	r22, r22
     158:	66 0f       	add	r22, r22
     15a:	60 7c       	andi	r22, 0xC0	; 192
     15c:	68 2b       	or	r22, r24
     15e:	6e bd       	out	0x2e, r22	; 46
     160:	08 95       	ret

00000162 <ICU_ClearTimerValue>:
		default: break;
	}
}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
     162:	88 23       	and	r24, r24
     164:	11 f4       	brne	.+4      	; 0x16a <ICU_ClearTimerValue+0x8>
		case ICU_TIMER_1: *(uint16*)TIMER1_CNTR_REG_L = 0x0000U; break;
     166:	1d bc       	out	0x2d, r1	; 45
     168:	1c bc       	out	0x2c, r1	; 44
     16a:	08 95       	ret

0000016c <ICU_GetInputCaptureValue>:
	}
}

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	uint16 u16Local_Value = 0U;
	switch (Tmr_Channel) {
     16c:	88 23       	and	r24, r24
     16e:	19 f4       	brne	.+6      	; 0x176 <ICU_GetInputCaptureValue+0xa>
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
     170:	86 b5       	in	r24, 0x26	; 38
     172:	97 b5       	in	r25, 0x27	; 39
     174:	08 95       	ret
		default: break;
	}
}

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	uint16 u16Local_Value = 0U;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
	switch (Tmr_Channel) {
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
		default: break;
	}
	return u16Local_Value;
}
     17a:	08 95       	ret

0000017c <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
     17c:	88 23       	and	r24, r24
     17e:	59 f4       	brne	.+22     	; 0x196 <ICU_GetStatus+0x1a>
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
     180:	88 b7       	in	r24, 0x38	; 56
     182:	82 95       	swap	r24
     184:	86 95       	lsr	r24
     186:	87 70       	andi	r24, 0x07	; 7
     188:	80 ff       	sbrs	r24, 0
     18a:	07 c0       	rjmp	.+14     	; 0x19a <ICU_GetStatus+0x1e>
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
     18c:	88 b7       	in	r24, 0x38	; 56
     18e:	80 62       	ori	r24, 0x20	; 32
     190:	88 bf       	out	0x38, r24	; 56
				return ICU_EVENT_CATURED;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	08 95       	ret
			} else {
				return ICU_RUNNING;
			}
		default: break;
	}
	return ICU_RUNNING;
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	08 95       	ret
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
				return ICU_EVENT_CATURED;
			} else {
				return ICU_RUNNING;
     19a:	80 e0       	ldi	r24, 0x00	; 0
			}
		default: break;
	}
	return ICU_RUNNING;
}
     19c:	08 95       	ret

0000019e <ICU_InitTimer1>:
}

/************************************************************************/
/*					Private Functions Implementations                   */
/************************************************************************/
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
     19e:	fc 01       	movw	r30, r24
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLEAR_BIT(*PORTD_DIR_REG, 6U);
     1a0:	8e 98       	cbi	0x11, 6	; 17
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
     1a2:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     1a4:	1e bc       	out	0x2e, r1	; 46
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     1a6:	9e b5       	in	r25, 0x2e	; 46
     1a8:	81 81       	ldd	r24, Z+1	; 0x01
     1aa:	89 2b       	or	r24, r25
     1ac:	8e bd       	out	0x2e, r24	; 46
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     1ae:	9e b5       	in	r25, 0x2e	; 46
     1b0:	82 81       	ldd	r24, Z+2	; 0x02
     1b2:	82 95       	swap	r24
     1b4:	88 0f       	add	r24, r24
     1b6:	88 0f       	add	r24, r24
     1b8:	80 7c       	andi	r24, 0xC0	; 192
     1ba:	89 2b       	or	r24, r25
     1bc:	8e bd       	out	0x2e, r24	; 46
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     1be:	99 b7       	in	r25, 0x39	; 57
     1c0:	83 81       	ldd	r24, Z+3	; 0x03
     1c2:	82 95       	swap	r24
     1c4:	88 0f       	add	r24, r24
     1c6:	80 7e       	andi	r24, 0xE0	; 224
     1c8:	89 2b       	or	r24, r25
     1ca:	89 bf       	out	0x39, r24	; 57
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
     1cc:	1d bc       	out	0x2d, r1	; 45
     1ce:	1c bc       	out	0x2c, r1	; 44
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     1d0:	17 bc       	out	0x27, r1	; 39
     1d2:	16 bc       	out	0x26, r1	; 38
}
     1d4:	08 95       	ret

000001d6 <ICU_Init>:

/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 81       	ld	r18, Z
     1da:	22 23       	and	r18, r18
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <ICU_Init+0xc>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
     1de:	0e 94 cf 00 	call	0x19e	; 0x19e <ICU_InitTimer1>
     1e2:	08 95       	ret

000001e4 <ICU_GetDutyCycle_Timer1>:
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
}

void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	4c 01       	movw	r8, r24
     1fe:	eb 01       	movw	r28, r22
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     200:	88 b7       	in	r24, 0x38	; 56
     202:	80 62       	ori	r24, 0x20	; 32
     204:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	0e 94 a4 00 	call	0x148	; 0x148 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 be 00 	call	0x17c	; 0x17c <ICU_GetStatus>
     214:	88 23       	and	r24, r24
     216:	d9 f3       	breq	.-10     	; 0x20e <ICU_GetDutyCycle_Timer1+0x2a>
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	0e 94 a4 00 	call	0x148	; 0x148 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 b1 00 	call	0x162	; 0x162 <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     226:	88 b7       	in	r24, 0x38	; 56
     228:	80 62       	ori	r24, 0x20	; 32
     22a:	88 bf       	out	0x38, r24	; 56
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
     22c:	cc 24       	eor	r12, r12
     22e:	dd 24       	eor	r13, r13
     230:	76 01       	movw	r14, r12
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     232:	0e c0       	rjmp	.+28     	; 0x250 <ICU_GetDutyCycle_Timer1+0x6c>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     234:	88 b7       	in	r24, 0x38	; 56
     236:	82 ff       	sbrs	r24, 2
     238:	0b c0       	rjmp	.+22     	; 0x250 <ICU_GetDutyCycle_Timer1+0x6c>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     23a:	88 b7       	in	r24, 0x38	; 56
     23c:	84 60       	ori	r24, 0x04	; 4
     23e:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	a1 e0       	ldi	r26, 0x01	; 1
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	c8 0e       	add	r12, r24
     24a:	d9 1e       	adc	r13, r25
     24c:	ea 1e       	adc	r14, r26
     24e:	fb 1e       	adc	r15, r27
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 be 00 	call	0x17c	; 0x17c <ICU_GetStatus>
     256:	88 23       	and	r24, r24
     258:	69 f3       	breq	.-38     	; 0x234 <ICU_GetDutyCycle_Timer1+0x50>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 b6 00 	call	0x16c	; 0x16c <ICU_GetInputCaptureValue>
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	c8 0e       	add	r12, r24
     266:	d9 1e       	adc	r13, r25
     268:	ea 1e       	adc	r14, r26
     26a:	fb 1e       	adc	r15, r27

	uint32 u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	0e 94 a4 00 	call	0x148	; 0x148 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 b1 00 	call	0x162	; 0x162 <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     27a:	88 b7       	in	r24, 0x38	; 56
     27c:	80 62       	ori	r24, 0x20	; 32
     27e:	88 bf       	out	0x38, r24	; 56
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     280:	06 c0       	rjmp	.+12     	; 0x28e <ICU_GetDutyCycle_Timer1+0xaa>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     282:	88 b7       	in	r24, 0x38	; 56
     284:	82 ff       	sbrs	r24, 2
     286:	03 c0       	rjmp	.+6      	; 0x28e <ICU_GetDutyCycle_Timer1+0xaa>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     288:	88 b7       	in	r24, 0x38	; 56
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 be 00 	call	0x17c	; 0x17c <ICU_GetStatus>
     294:	88 23       	and	r24, r24
     296:	a9 f3       	breq	.-22     	; 0x282 <ICU_GetDutyCycle_Timer1+0x9e>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 b6 00 	call	0x16c	; 0x16c <ICU_GetInputCaptureValue>
     29e:	8c 01       	movw	r16, r24
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
     2a0:	aa 24       	eor	r10, r10
     2a2:	bb 24       	eor	r11, r11
     2a4:	c7 01       	movw	r24, r14
     2a6:	b6 01       	movw	r22, r12
     2a8:	a5 01       	movw	r20, r10
     2aa:	94 01       	movw	r18, r8
     2ac:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
     2b0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4a e7       	ldi	r20, 0x7A	; 122
     2ba:	54 e4       	ldi	r21, 0x44	; 68
     2bc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	34 e2       	ldi	r19, 0x24	; 36
     2c4:	44 e7       	ldi	r20, 0x74	; 116
     2c6:	5b e4       	ldi	r21, 0x4B	; 75
     2c8:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	88 83       	st	Y, r24
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	aa 83       	std	Y+2, r26	; 0x02
     2d6:	bb 83       	std	Y+3, r27	; 0x03
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
     2d8:	c8 01       	movw	r24, r16
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
	Duty_Ptr->Period_Time = (float32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
     2de:	c8 0e       	add	r12, r24
     2e0:	d9 1e       	adc	r13, r25
     2e2:	ea 1e       	adc	r14, r26
     2e4:	fb 1e       	adc	r15, r27
     2e6:	c7 01       	movw	r24, r14
     2e8:	b6 01       	movw	r22, r12
     2ea:	a5 01       	movw	r20, r10
     2ec:	94 01       	movw	r18, r8
     2ee:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
     2f2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	4a e7       	ldi	r20, 0x7A	; 122
     2fc:	54 e4       	ldi	r21, 0x44	; 68
     2fe:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	34 e2       	ldi	r19, 0x24	; 36
     306:	44 e7       	ldi	r20, 0x74	; 116
     308:	5b e4       	ldi	r21, 0x4B	; 75
     30a:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	8c 83       	std	Y+4, r24	; 0x04
     314:	9d 83       	std	Y+5, r25	; 0x05
     316:	ae 83       	std	Y+6, r26	; 0x06
     318:	bf 83       	std	Y+7, r27	; 0x07
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	bf 90       	pop	r11
     32c:	af 90       	pop	r10
     32e:	9f 90       	pop	r9
     330:	8f 90       	pop	r8
     332:	08 95       	ret

00000334 <ICU_GetDutyCycle>:
	}
	return ICU_RUNNING;
}

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
	switch (Tmr_Channel) {
     334:	88 23       	and	r24, r24
     336:	21 f4       	brne	.+8      	; 0x340 <ICU_GetDutyCycle+0xc>
		case ICU_TIMER_1:
			ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
     338:	cb 01       	movw	r24, r22
     33a:	ba 01       	movw	r22, r20
     33c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ICU_GetDutyCycle_Timer1>
     340:	08 95       	ret

00000342 <PWM_ChangeFrequency>:
﻿#include "../lib/ATmega32A_Config.h"
#include "../MCAL/PWM/PWM_Drawer.h"
#include <util/delay.h>
#include <stdio.h>

void PWM_ChangeFrequency(uint16_t prescaler, uint16_t period) {
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	29 97       	sbiw	r28, 0x09	; 9
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	18 2f       	mov	r17, r24
     35e:	7b 01       	movw	r14, r22
	printf("Changing PWM frequency...\n");
     360:	84 e6       	ldi	r24, 0x64	; 100
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 26 12 	call	0x244c	; 0x244c <puts>
	
	PWM_ConfigurationType newConfig = {
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	8a 83       	std	Y+2, r24	; 0x02
     36e:	1b 83       	std	Y+3, r17	; 0x03
     370:	1c 82       	std	Y+4, r1	; 0x04
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9e 83       	std	Y+6, r25	; 0x06
     378:	8d 83       	std	Y+5, r24	; 0x05
     37a:	f8 86       	std	Y+8, r15	; 0x08
     37c:	ef 82       	std	Y+7, r14	; 0x07
     37e:	82 e3       	ldi	r24, 0x32	; 50
     380:	89 87       	std	Y+9, r24	; 0x09
		.Prescale_Value = 64U,
		.Period_ms = period,
		.Duty_Percent = 50U
	};

	PWM_Init(&newConfig);
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 11 0a 	call	0x1422	; 0x1422 <PWM_Init>
	printf("PWM frequency changed.\n");
     38a:	8e e7       	ldi	r24, 0x7E	; 126
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 26 12 	call	0x244c	; 0x244c <puts>
}
     392:	29 96       	adiw	r28, 0x09	; 9
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	08 95       	ret

000003aa <main>:

int main(void) {
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	61 97       	sbiw	r28, 0x11	; 17
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     3be:	0e 94 24 0a 	call	0x1448	; 0x1448 <PWMDrawer_Init>
PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
     3c2:	fe 01       	movw	r30, r28
     3c4:	31 96       	adiw	r30, 0x01	; 1
     3c6:	81 e1       	ldi	r24, 0x11	; 17
     3c8:	df 01       	movw	r26, r30
     3ca:	1d 92       	st	X+, r1
     3cc:	8a 95       	dec	r24
     3ce:	e9 f7       	brne	.-6      	; 0x3ca <main+0x20>
// Set the desired duty cycle
uint8_t dutyCycle = 40;  // Set your desired duty cycle (e.g., 50%)

// Set the PWM frequency (you can calculate this based on your desired frequency)
uint16_t newTop = (F_CPU / (PWM_PRESCALE_256 * 1000 * 2));  // Change 2 to your desired frequency
PWM_ChangeFrequency(PWM_PRESCALE_256, newTop);
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	65 e3       	ldi	r22, 0x35	; 53
     3d6:	75 e0       	ldi	r23, 0x05	; 5
     3d8:	0e 94 a1 01 	call	0x342	; 0x342 <PWM_ChangeFrequency>

while (1) {
	// Set the duty cycle and update the PWM signal
	PWM_SetDuty(PWM_TIMER_0_CHANNEL, PWM_NON_INVERTED, dutyCycle);
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	48 e2       	ldi	r20, 0x28	; 40
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	0e 94 19 07 	call	0xe32	; 0xe32 <PWM_SetDuty>

	// Measure the signal
	PWMDrawer_MeasureSignal(&Signal_Data);
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	0e 94 31 0a 	call	0x1462	; 0x1462 <PWMDrawer_MeasureSignal>

	// Draw the signal
	PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	60 e8       	ldi	r22, 0x80	; 128
     3fa:	7e e3       	ldi	r23, 0x3E	; 62
     3fc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <PWMDrawer_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	99 ef       	ldi	r25, 0xF9	; 249
     404:	a0 e0       	ldi	r26, 0x00	; 0
     406:	81 50       	subi	r24, 0x01	; 1
     408:	90 40       	sbci	r25, 0x00	; 0
     40a:	a0 40       	sbci	r26, 0x00	; 0
     40c:	e1 f7       	brne	.-8      	; 0x406 <main+0x5c>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <main+0x66>
     410:	00 00       	nop
     412:	e4 cf       	rjmp	.-56     	; 0x3dc <main+0x32>

00000414 <GLCD_SelectPage>:
	GLCD_SelectPage(GLCD_PAGE_0);
	gu8_Curr_Page = 0;
}

void GLCD_SelectPage(GLCD_PageSelectType Page) {
	switch (Page) {
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	91 f0       	breq	.+36     	; 0x43c <GLCD_SelectPage+0x28>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	28 f0       	brcs	.+10     	; 0x426 <GLCD_SelectPage+0x12>
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	c9 f0       	breq	.+50     	; 0x452 <GLCD_SelectPage+0x3e>
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	61 f5       	brne	.+88     	; 0x47c <GLCD_SelectPage+0x68>
     424:	21 c0       	rjmp	.+66     	; 0x468 <GLCD_SelectPage+0x54>
		case GLCD_NO_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	64 e0       	ldi	r22, 0x04	; 4
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			break;
     43a:	08 95       	ret
		case GLCD_PAGE_0:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	64 e0       	ldi	r22, 0x04	; 4
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	65 e0       	ldi	r22, 0x05	; 5
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			break;
     450:	08 95       	ret
		case GLCD_PAGE_1:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	64 e0       	ldi	r22, 0x04	; 4
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	65 e0       	ldi	r22, 0x05	; 5
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			break;
     466:	08 95       	ret
		case GLCD_BOTH_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	64 e0       	ldi	r22, 0x04	; 4
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	65 e0       	ldi	r22, 0x05	; 5
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
     47c:	08 95       	ret

0000047e <GLCD_SendInstruction>:
			break;
		default: break;
	}
}

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
     47e:	cf 93       	push	r28
     480:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	6c 2f       	mov	r22, r28
     49a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a8:	8a e1       	ldi	r24, 0x1A	; 26
     4aa:	8a 95       	dec	r24
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <GLCD_SendInstruction+0x2c>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <GLCD_SendInstruction+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
}
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <GLCD_Init>:
void GLCD_Init(void) {
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Init(gaStrGPT_Config);
	#endif
	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	62 e0       	ldi	r22, 0x02	; 2
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	61 e0       	ldi	r22, 0x01	; 1
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	66 e0       	ldi	r22, 0x06	; 6
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	65 e0       	ldi	r22, 0x05	; 5
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	0e 94 29 06 	call	0xc52	; 0xc52 <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	0e 94 a3 06 	call	0xd46	; 0xd46 <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	66 e0       	ldi	r22, 0x06	; 6
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
     512:	8e e3       	ldi	r24, 0x3E	; 62
     514:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
     518:	88 eb       	ldi	r24, 0xB8	; 184
     51a:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
     51e:	10 92 1a 01 	sts	0x011A, r1
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
     522:	80 e4       	ldi	r24, 0x40	; 64
     524:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
     528:	10 92 19 01 	sts	0x0119, r1
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
     52c:	80 ec       	ldi	r24, 0xC0	; 192
     52e:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
     532:	8f e3       	ldi	r24, 0x3F	; 63
     534:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     53e:	10 92 18 01 	sts	0x0118, r1
}
     542:	08 95       	ret

00000544 <GLCD_SendData>:
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
}

void GLCD_SendData(uint8 Data) {
     544:	cf 93       	push	r28
     546:	c8 2f       	mov	r28, r24
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	41 e0       	ldi	r20, 0x01	; 1
     54e:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	6c 2f       	mov	r22, r28
     560:	0e 94 b5 06 	call	0xd6a	; 0xd6a <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	41 e0       	ldi	r20, 0x01	; 1
     56a:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
     56e:	8a e1       	ldi	r24, 0x1A	; 26
     570:	8a 95       	dec	r24
     572:	f1 f7       	brne	.-4      	; 0x570 <GLCD_SendData+0x2c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <GLCD_SendData+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
}
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <GLCD_Reset>:

void GLCD_Reset(void) {
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	66 e0       	ldi	r22, 0x06	; 6
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
     58e:	85 e3       	ldi	r24, 0x35	; 53
     590:	8a 95       	dec	r24
     592:	f1 f7       	brne	.-4      	; 0x590 <GLCD_Reset+0xc>
     594:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
		_delay_us(10);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	66 e0       	ldi	r22, 0x06	; 6
     59a:	41 e0       	ldi	r20, 0x01	; 1
     59c:	0e 94 53 06 	call	0xca6	; 0xca6 <DIO_WritePin>
}
     5a0:	08 95       	ret

000005a2 <GLCD_DisplaySpecialPattern>:

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	12 2f       	mov	r17, r18
     5ba:	f3 2e       	mov	r15, r19
     5bc:	e4 2e       	mov	r14, r20
     5be:	d5 2e       	mov	r13, r21
     5c0:	c6 2e       	mov	r12, r22
     5c2:	b7 2e       	mov	r11, r23
     5c4:	a8 2e       	mov	r10, r24
     5c6:	99 2e       	mov	r9, r25
     5c8:	c0 e0       	ldi	r28, 0x00	; 0
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8 i = 0; i < 5; i++) {
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     5cc:	80 91 1a 01 	lds	r24, 0x011A
     5d0:	88 54       	subi	r24, 0x48	; 72
     5d2:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     5d6:	80 91 19 01 	lds	r24, 0x0119
     5da:	80 5c       	subi	r24, 0xC0	; 192
     5dc:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     5e0:	21 2f       	mov	r18, r17
     5e2:	3f 2d       	mov	r19, r15
     5e4:	4e 2d       	mov	r20, r14
     5e6:	5d 2d       	mov	r21, r13
     5e8:	6c 2d       	mov	r22, r12
     5ea:	7b 2d       	mov	r23, r11
     5ec:	8a 2d       	mov	r24, r10
     5ee:	99 2d       	mov	r25, r9
     5f0:	0c 2f       	mov	r16, r28
     5f2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__lshrdi3>
     5f6:	82 2f       	mov	r24, r18
     5f8:	0e 94 a2 02 	call	0x544	; 0x544 <GLCD_SendData>
		gu8_Curr_Y_Address++;
     5fc:	80 91 19 01 	lds	r24, 0x0119
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	80 93 19 01 	sts	0x0119, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     606:	80 34       	cpi	r24, 0x40	; 64
     608:	48 f0       	brcs	.+18     	; 0x61c <GLCD_DisplaySpecialPattern+0x7a>
     60a:	80 91 18 01 	lds	r24, 0x0118
     60e:	88 23       	and	r24, r24
     610:	29 f4       	brne	.+10     	; 0x61c <GLCD_DisplaySpecialPattern+0x7a>
			GLCD_SelectPage(GLCD_PAGE_1);
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     618:	10 92 19 01 	sts	0x0119, r1
     61c:	28 96       	adiw	r28, 0x08	; 8
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
	for(uint8 i = 0; i < 5; i++) {
     61e:	c8 32       	cpi	r28, 0x28	; 40
     620:	d1 05       	cpc	r29, r1
     622:	a1 f6       	brne	.-88     	; 0x5cc <GLCD_DisplaySpecialPattern+0x2a>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	08 95       	ret

0000063c <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	20 91 18 01 	lds	r18, 0x0118
     642:	21 11       	cpse	r18, r1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	99 23       	and	r25, r25
     648:	49 f4       	brne	.+18     	; 0x65c <GLCD_DisplayCharacter+0x20>
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	20 91 19 01 	lds	r18, 0x0119
     650:	29 33       	cpi	r18, 0x39	; 57
     652:	08 f0       	brcs	.+2      	; 0x656 <GLCD_DisplayCharacter+0x1a>
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	99 23       	and	r25, r25
     658:	09 f4       	brne	.+2      	; 0x65c <GLCD_DisplayCharacter+0x20>
     65a:	8b c1       	rjmp	.+790    	; 0x972 <__stack+0x113>
		/* Enough space to write character */
		switch (Data) {
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	80 97       	sbiw	r24, 0x20	; 32
     660:	8b 35       	cpi	r24, 0x5B	; 91
     662:	91 05       	cpc	r25, r1
     664:	08 f0       	brcs	.+2      	; 0x668 <GLCD_DisplayCharacter+0x2c>
     666:	68 c1       	rjmp	.+720    	; 0x938 <__stack+0xd9>
     668:	86 5d       	subi	r24, 0xD6	; 214
     66a:	9f 4f       	sbci	r25, 0xFF	; 255
     66c:	fc 01       	movw	r30, r24
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	05 90       	lpm	r0, Z+
     674:	f4 91       	lpm	r31, Z
     676:	e0 2d       	mov	r30, r0
     678:	09 94       	ijmp
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     67a:	2c e7       	ldi	r18, 0x7C	; 124
     67c:	32 e1       	ldi	r19, 0x12	; 18
     67e:	41 e1       	ldi	r20, 0x11	; 17
     680:	52 e1       	ldi	r21, 0x12	; 18
     682:	6c e7       	ldi	r22, 0x7C	; 124
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     68e:	54 c1       	rjmp	.+680    	; 0x938 <__stack+0xd9>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     690:	2f e7       	ldi	r18, 0x7F	; 127
     692:	39 e0       	ldi	r19, 0x09	; 9
     694:	49 e0       	ldi	r20, 0x09	; 9
     696:	59 e0       	ldi	r21, 0x09	; 9
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     6a4:	49 c1       	rjmp	.+658    	; 0x938 <__stack+0xd9>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     6a6:	2f e7       	ldi	r18, 0x7F	; 127
     6a8:	39 e0       	ldi	r19, 0x09	; 9
     6aa:	49 e1       	ldi	r20, 0x19	; 25
     6ac:	59 e2       	ldi	r21, 0x29	; 41
     6ae:	6f e4       	ldi	r22, 0x4F	; 79
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     6ba:	3e c1       	rjmp	.+636    	; 0x938 <__stack+0xd9>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     6bc:	2f e7       	ldi	r18, 0x7F	; 127
     6be:	39 e4       	ldi	r19, 0x49	; 73
     6c0:	49 e4       	ldi	r20, 0x49	; 73
     6c2:	59 e4       	ldi	r21, 0x49	; 73
     6c4:	61 e4       	ldi	r22, 0x41	; 65
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     6d0:	33 c1       	rjmp	.+614    	; 0x938 <__stack+0xd9>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     6d2:	2e e1       	ldi	r18, 0x1E	; 30
     6d4:	31 e2       	ldi	r19, 0x21	; 33
     6d6:	41 e3       	ldi	r20, 0x31	; 49
     6d8:	5e e3       	ldi	r21, 0x3E	; 62
     6da:	60 e4       	ldi	r22, 0x40	; 64
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     6e6:	28 c1       	rjmp	.+592    	; 0x938 <__stack+0xd9>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     6e8:	2f e3       	ldi	r18, 0x3F	; 63
     6ea:	30 e4       	ldi	r19, 0x40	; 64
     6ec:	40 e4       	ldi	r20, 0x40	; 64
     6ee:	50 e4       	ldi	r21, 0x40	; 64
     6f0:	6f e3       	ldi	r22, 0x3F	; 63
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     6fc:	1d c1       	rjmp	.+570    	; 0x938 <__stack+0xd9>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     6fe:	2f e7       	ldi	r18, 0x7F	; 127
     700:	32 e0       	ldi	r19, 0x02	; 2
     702:	4c e1       	ldi	r20, 0x1C	; 28
     704:	50 e2       	ldi	r21, 0x20	; 32
     706:	6f e7       	ldi	r22, 0x7F	; 127
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     712:	12 c1       	rjmp	.+548    	; 0x938 <__stack+0xd9>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     714:	2e e3       	ldi	r18, 0x3E	; 62
     716:	31 e4       	ldi	r19, 0x41	; 65
     718:	41 e4       	ldi	r20, 0x41	; 65
     71a:	51 e4       	ldi	r21, 0x41	; 65
     71c:	61 e4       	ldi	r22, 0x41	; 65
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     728:	07 c1       	rjmp	.+526    	; 0x938 <__stack+0xd9>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     72a:	23 e0       	ldi	r18, 0x03	; 3
     72c:	3c e0       	ldi	r19, 0x0C	; 12
     72e:	40 e7       	ldi	r20, 0x70	; 112
     730:	5c e0       	ldi	r21, 0x0C	; 12
     732:	63 e0       	ldi	r22, 0x03	; 3
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     73e:	fc c0       	rjmp	.+504    	; 0x938 <__stack+0xd9>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     740:	2f e7       	ldi	r18, 0x7F	; 127
     742:	31 e4       	ldi	r19, 0x41	; 65
     744:	41 e4       	ldi	r20, 0x41	; 65
     746:	5e e3       	ldi	r21, 0x3E	; 62
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     754:	f1 c0       	rjmp	.+482    	; 0x938 <__stack+0xd9>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	31 e0       	ldi	r19, 0x01	; 1
     75a:	4f e7       	ldi	r20, 0x7F	; 127
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     76a:	e6 c0       	rjmp	.+460    	; 0x938 <__stack+0xd9>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     76c:	2f e7       	ldi	r18, 0x7F	; 127
     76e:	38 e0       	ldi	r19, 0x08	; 8
     770:	44 e1       	ldi	r20, 0x14	; 20
     772:	52 e2       	ldi	r21, 0x22	; 34
     774:	61 e4       	ldi	r22, 0x41	; 65
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     780:	db c0       	rjmp	.+438    	; 0x938 <__stack+0xd9>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     782:	2f e7       	ldi	r18, 0x7F	; 127
     784:	38 e0       	ldi	r19, 0x08	; 8
     786:	48 e0       	ldi	r20, 0x08	; 8
     788:	58 e0       	ldi	r21, 0x08	; 8
     78a:	6f e7       	ldi	r22, 0x7F	; 127
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     796:	d0 c0       	rjmp	.+416    	; 0x938 <__stack+0xd9>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     798:	21 e6       	ldi	r18, 0x61	; 97
     79a:	31 e5       	ldi	r19, 0x51	; 81
     79c:	49 e4       	ldi	r20, 0x49	; 73
     79e:	55 e4       	ldi	r21, 0x45	; 69
     7a0:	63 e4       	ldi	r22, 0x43	; 67
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     7ac:	c5 c0       	rjmp	.+394    	; 0x938 <__stack+0xd9>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     7ae:	2f e7       	ldi	r18, 0x7F	; 127
     7b0:	32 e0       	ldi	r19, 0x02	; 2
     7b2:	4c e0       	ldi	r20, 0x0C	; 12
     7b4:	52 e0       	ldi	r21, 0x02	; 2
     7b6:	6f e7       	ldi	r22, 0x7F	; 127
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     7c2:	ba c0       	rjmp	.+372    	; 0x938 <__stack+0xd9>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     7c4:	2f e4       	ldi	r18, 0x4F	; 79
     7c6:	39 e4       	ldi	r19, 0x49	; 73
     7c8:	49 e4       	ldi	r20, 0x49	; 73
     7ca:	59 e4       	ldi	r21, 0x49	; 73
     7cc:	69 ef       	ldi	r22, 0xF9	; 249
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     7d8:	af c0       	rjmp	.+350    	; 0x938 <__stack+0xd9>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     7da:	21 e4       	ldi	r18, 0x41	; 65
     7dc:	31 e4       	ldi	r19, 0x41	; 65
     7de:	4f e7       	ldi	r20, 0x7F	; 127
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	61 e4       	ldi	r22, 0x41	; 65
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     7ee:	a4 c0       	rjmp	.+328    	; 0x938 <__stack+0xd9>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     7f0:	23 ec       	ldi	r18, 0xC3	; 195
     7f2:	33 e7       	ldi	r19, 0x73	; 115
     7f4:	48 e1       	ldi	r20, 0x18	; 24
     7f6:	5e ec       	ldi	r21, 0xCE	; 206
     7f8:	63 ec       	ldi	r22, 0xC3	; 195
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     804:	99 c0       	rjmp	.+306    	; 0x938 <__stack+0xd9>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     806:	24 e2       	ldi	r18, 0x24	; 36
     808:	34 e2       	ldi	r19, 0x24	; 36
     80a:	44 e2       	ldi	r20, 0x24	; 36
     80c:	54 e2       	ldi	r21, 0x24	; 36
     80e:	64 e2       	ldi	r22, 0x24	; 36
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     81a:	8e c0       	rjmp	.+284    	; 0x938 <__stack+0xd9>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e7       	ldi	r19, 0x70	; 112
     820:	40 e7       	ldi	r20, 0x70	; 112
     822:	50 e7       	ldi	r21, 0x70	; 112
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     830:	83 c0       	rjmp	.+262    	; 0x938 <__stack+0xd9>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     846:	78 c0       	rjmp	.+240    	; 0x938 <__stack+0xd9>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     848:	28 e1       	ldi	r18, 0x18	; 24
     84a:	38 e1       	ldi	r19, 0x18	; 24
     84c:	48 e1       	ldi	r20, 0x18	; 24
     84e:	58 e1       	ldi	r21, 0x18	; 24
     850:	68 e1       	ldi	r22, 0x18	; 24
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     85c:	6d c0       	rjmp	.+218    	; 0x938 <__stack+0xd9>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     85e:	2e e3       	ldi	r18, 0x3E	; 62
     860:	31 e5       	ldi	r19, 0x51	; 81
     862:	49 e4       	ldi	r20, 0x49	; 73
     864:	55 e4       	ldi	r21, 0x45	; 69
     866:	6e e3       	ldi	r22, 0x3E	; 62
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     872:	62 c0       	rjmp	.+196    	; 0x938 <__stack+0xd9>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     874:	24 e4       	ldi	r18, 0x44	; 68
     876:	32 e4       	ldi	r19, 0x42	; 66
     878:	4f e7       	ldi	r20, 0x7F	; 127
     87a:	50 e4       	ldi	r21, 0x40	; 64
     87c:	60 e4       	ldi	r22, 0x40	; 64
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     888:	57 c0       	rjmp	.+174    	; 0x938 <__stack+0xd9>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     88a:	26 e4       	ldi	r18, 0x46	; 70
     88c:	31 e6       	ldi	r19, 0x61	; 97
     88e:	41 e5       	ldi	r20, 0x51	; 81
     890:	5e e4       	ldi	r21, 0x4E	; 78
     892:	60 e4       	ldi	r22, 0x40	; 64
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     89e:	4c c0       	rjmp	.+152    	; 0x938 <__stack+0xd9>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     8a0:	21 e4       	ldi	r18, 0x41	; 65
     8a2:	39 e4       	ldi	r19, 0x49	; 73
     8a4:	49 e4       	ldi	r20, 0x49	; 73
     8a6:	59 e4       	ldi	r21, 0x49	; 73
     8a8:	66 e3       	ldi	r22, 0x36	; 54
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     8b4:	41 c0       	rjmp	.+130    	; 0x938 <__stack+0xd9>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     8b6:	28 e1       	ldi	r18, 0x18	; 24
     8b8:	34 e1       	ldi	r19, 0x14	; 20
     8ba:	42 e1       	ldi	r20, 0x12	; 18
     8bc:	5f e7       	ldi	r21, 0x7F	; 127
     8be:	60 e1       	ldi	r22, 0x10	; 16
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     8ca:	36 c0       	rjmp	.+108    	; 0x938 <__stack+0xd9>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     8cc:	2f e4       	ldi	r18, 0x4F	; 79
     8ce:	39 e4       	ldi	r19, 0x49	; 73
     8d0:	49 e4       	ldi	r20, 0x49	; 73
     8d2:	51 e5       	ldi	r21, 0x51	; 81
     8d4:	61 e2       	ldi	r22, 0x21	; 33
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     8e0:	2b c0       	rjmp	.+86     	; 0x938 <__stack+0xd9>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     8e2:	2c e7       	ldi	r18, 0x7C	; 124
     8e4:	3a e4       	ldi	r19, 0x4A	; 74
     8e6:	49 e4       	ldi	r20, 0x49	; 73
     8e8:	59 e4       	ldi	r21, 0x49	; 73
     8ea:	61 e3       	ldi	r22, 0x31	; 49
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     8f6:	20 c0       	rjmp	.+64     	; 0x938 <__stack+0xd9>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     8f8:	21 e0       	ldi	r18, 0x01	; 1
     8fa:	39 e4       	ldi	r19, 0x49	; 73
     8fc:	49 e2       	ldi	r20, 0x29	; 41
     8fe:	59 e1       	ldi	r21, 0x19	; 25
     900:	6f e0       	ldi	r22, 0x0F	; 15
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     90c:	15 c0       	rjmp	.+42     	; 0x938 <__stack+0xd9>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     90e:	27 e7       	ldi	r18, 0x77	; 119
     910:	39 e4       	ldi	r19, 0x49	; 73
     912:	49 e4       	ldi	r20, 0x49	; 73
     914:	59 e4       	ldi	r21, 0x49	; 73
     916:	67 e7       	ldi	r22, 0x77	; 119
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
     922:	0a c0       	rjmp	.+20     	; 0x938 <__stack+0xd9>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     924:	2f e4       	ldi	r18, 0x4F	; 79
     926:	39 e4       	ldi	r19, 0x49	; 73
     928:	49 e4       	ldi	r20, 0x49	; 73
     92a:	59 e4       	ldi	r21, 0x49	; 73
     92c:	6f e7       	ldi	r22, 0x7F	; 127
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     938:	80 91 1a 01 	lds	r24, 0x011A
     93c:	88 54       	subi	r24, 0x48	; 72
     93e:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     942:	80 91 19 01 	lds	r24, 0x0119
     946:	80 5c       	subi	r24, 0xC0	; 192
     948:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
		GLCD_SendData(0);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 a2 02 	call	0x544	; 0x544 <GLCD_SendData>
		gu8_Curr_Y_Address++;
     952:	80 91 19 01 	lds	r24, 0x0119
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	80 93 19 01 	sts	0x0119, r24
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
     95c:	80 34       	cpi	r24, 0x40	; 64
     95e:	48 f0       	brcs	.+18     	; 0x972 <__stack+0x113>
     960:	80 91 18 01 	lds	r24, 0x0118
     964:	88 23       	and	r24, r24
     966:	29 f4       	brne	.+10     	; 0x972 <__stack+0x113>
			GLCD_SelectPage(GLCD_PAGE_1);
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
     96e:	10 92 19 01 	sts	0x0119, r1
     972:	08 95       	ret

00000974 <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {	
     97a:	88 81       	ld	r24, Y
     97c:	88 23       	and	r24, r24
     97e:	31 f0       	breq	.+12     	; 0x98c <GLCD_DisplayString+0x18>
			gu8_Curr_Y_Address = 0;
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
     980:	21 96       	adiw	r28, 0x01	; 1
	while (*Data_Ptr != '\0') {	
		GLCD_DisplayCharacter(*Data_Ptr);
     982:	0e 94 1e 03 	call	0x63c	; 0x63c <GLCD_DisplayCharacter>
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {	
     986:	89 91       	ld	r24, Y+
     988:	88 23       	and	r24, r24
     98a:	d9 f7       	brne	.-10     	; 0x982 <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32 Data) {
     992:	4f 92       	push	r4
     994:	5f 92       	push	r5
     996:	6f 92       	push	r6
     998:	7f 92       	push	r7
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <GLCD_DisplayInteger+0x1e>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <GLCD_DisplayInteger+0x20>
     9b2:	0f 92       	push	r0
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	6b 01       	movw	r12, r22
     9ba:	7c 01       	movw	r14, r24
	if (Data < 0) {
     9bc:	99 23       	and	r25, r25
     9be:	5c f4       	brge	.+22     	; 0x9d6 <GLCD_DisplayInteger+0x44>
		GLCD_DisplayCharacter('-');
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	0e 94 1e 03 	call	0x63c	; 0x63c <GLCD_DisplayCharacter>
		Data = -1 * Data;
     9c6:	f0 94       	com	r15
     9c8:	e0 94       	com	r14
     9ca:	d0 94       	com	r13
     9cc:	c0 94       	com	r12
     9ce:	c1 1c       	adc	r12, r1
     9d0:	d1 1c       	adc	r13, r1
     9d2:	e1 1c       	adc	r14, r1
     9d4:	f1 1c       	adc	r15, r1
	}
	uint8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
     9d6:	19 82       	std	Y+1, r1	; 0x01
     9d8:	1a 82       	std	Y+2, r1	; 0x02
     9da:	1b 82       	std	Y+3, r1	; 0x03
     9dc:	1c 82       	std	Y+4, r1	; 0x04
     9de:	1d 82       	std	Y+5, r1	; 0x05
     9e0:	8e 01       	movw	r16, r28
     9e2:	0f 5f       	subi	r16, 0xFF	; 255
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
	char* str_ptr = str_reversed;
	do {
		u8Local_Digit = Data%10;
     9e6:	0f 2e       	mov	r0, r31
     9e8:	fa e0       	ldi	r31, 0x0A	; 10
     9ea:	4f 2e       	mov	r4, r31
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	5f 2e       	mov	r5, r31
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	6f 2e       	mov	r6, r31
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	7f 2e       	mov	r7, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	a3 01       	movw	r20, r6
     a00:	92 01       	movw	r18, r4
     a02:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
     a06:	60 5d       	subi	r22, 0xD0	; 208
     a08:	f8 01       	movw	r30, r16
     a0a:	61 93       	st	Z+, r22
     a0c:	8f 01       	movw	r16, r30
		Data = Data/10;
     a0e:	c2 2e       	mov	r12, r18
     a10:	d3 2e       	mov	r13, r19
     a12:	e4 2e       	mov	r14, r20
     a14:	f5 2e       	mov	r15, r21
		str_ptr++;
     a16:	5f 01       	movw	r10, r30
	} while (Data > 0);
     a18:	1c 14       	cp	r1, r12
     a1a:	1d 04       	cpc	r1, r13
     a1c:	1e 04       	cpc	r1, r14
     a1e:	1f 04       	cpc	r1, r15
     a20:	64 f3       	brlt	.-40     	; 0x9fa <GLCD_DisplayInteger+0x68>
     a22:	ce 2e       	mov	r12, r30
     a24:	db 2c       	mov	r13, r11
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
	} while (str_ptr != str_reversed);
     a26:	8e 01       	movw	r16, r28
     a28:	0f 5f       	subi	r16, 0xFF	; 255
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
		Data = Data/10;
		str_ptr++;
	} while (Data > 0);
	do {
		str_ptr--;
     a2c:	08 94       	sec
     a2e:	a1 08       	sbc	r10, r1
     a30:	b1 08       	sbc	r11, r1
		GLCD_DisplayCharacter(*str_ptr);
     a32:	f6 01       	movw	r30, r12
     a34:	82 91       	ld	r24, -Z
     a36:	6f 01       	movw	r12, r30
     a38:	0e 94 1e 03 	call	0x63c	; 0x63c <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     a3c:	0a 15       	cp	r16, r10
     a3e:	1b 05       	cpc	r17, r11
     a40:	a9 f7       	brne	.-22     	; 0xa2c <GLCD_DisplayInteger+0x9a>
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	7f 90       	pop	r7
     a62:	6f 90       	pop	r6
     a64:	5f 90       	pop	r5
     a66:	4f 90       	pop	r4
     a68:	08 95       	ret

00000a6a <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(float32 Data) {
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	4b 01       	movw	r8, r22
     a84:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
     a86:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     a8a:	6b 01       	movw	r12, r22
     a8c:	ee 24       	eor	r14, r14
     a8e:	ff 24       	eor	r15, r15
     a90:	c7 01       	movw	r24, r14
     a92:	b6 01       	movw	r22, r12
     a94:	0e 94 c9 04 	call	0x992	; 0x992 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     a98:	8e e2       	ldi	r24, 0x2E	; 46
     a9a:	0e 94 1e 03 	call	0x63c	; 0x63c <GLCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	c5 01       	movw	r24, r10
     aac:	b4 01       	movw	r22, r8
     aae:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
     ab2:	c3 e0       	ldi	r28, 0x03	; 3
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
		Digit = (uint8)(DecimalPart * 10.0);
     ab4:	38 2f       	mov	r19, r24
     ab6:	29 2f       	mov	r18, r25
     ab8:	86 2f       	mov	r24, r22
     aba:	97 2f       	mov	r25, r23
     abc:	a3 2f       	mov	r26, r19
     abe:	b2 2f       	mov	r27, r18
     ac0:	bc 01       	movw	r22, r24
     ac2:	cd 01       	movw	r24, r26
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e2       	ldi	r20, 0x20	; 32
     aca:	51 e4       	ldi	r21, 0x41	; 65
     acc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     ad0:	c6 2e       	mov	r12, r22
     ad2:	d7 2f       	mov	r29, r23
     ad4:	18 2f       	mov	r17, r24
     ad6:	09 2f       	mov	r16, r25
     ad8:	86 2f       	mov	r24, r22
     ada:	9d 2f       	mov	r25, r29
     adc:	a1 2f       	mov	r26, r17
     ade:	b0 2f       	mov	r27, r16
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     ae8:	86 2e       	mov	r8, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     aea:	86 2f       	mov	r24, r22
     aec:	80 5d       	subi	r24, 0xD0	; 208
     aee:	0e 94 1e 03 	call	0x63c	; 0x63c <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     af2:	68 2d       	mov	r22, r8
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__floatsisf>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	8c 2d       	mov	r24, r12
     b04:	9d 2f       	mov	r25, r29
     b06:	a1 2f       	mov	r26, r17
     b08:	b0 2f       	mov	r27, r16
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
     b12:	c1 50       	subi	r28, 0x01	; 1
	uint16 IntegerPart = (uint16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
     b14:	79 f6       	brne	.-98     	; 0xab4 <GLCD_DisplayFloatingPoint+0x4a>
		Digit = (uint8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <GLCD_GoToLine>:

void GLCD_GoToLine(uint8 Line) {
     b30:	cf 93       	push	r28
     b32:	c8 2f       	mov	r28, r24
	if (Line < GLCD_MAX_LINES) {
     b34:	88 30       	cpi	r24, 0x08	; 8
     b36:	70 f4       	brcc	.+28     	; 0xb54 <GLCD_GoToLine+0x24>
		GLCD_SelectPage(GLCD_PAGE_0);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
     b3e:	c0 93 1a 01 	sts	0x011A, r28
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
     b42:	8c 2f       	mov	r24, r28
     b44:	88 54       	subi	r24, 0x48	; 72
     b46:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
     b4a:	10 92 19 01 	sts	0x0119, r1
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
     b4e:	80 e4       	ldi	r24, 0x40	; 64
     b50:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
	}
}
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
		GLCD_GoToLine(Line);
     b5e:	8d 2f       	mov	r24, r29
     b60:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
     b6a:	c0 e4       	ldi	r28, 0x40	; 64
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
     b6c:	8c 2f       	mov	r24, r28
     b6e:	0e 94 3f 02 	call	0x47e	; 0x47e <GLCD_SendInstruction>
			GLCD_SendData(0);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 a2 02 	call	0x544	; 0x544 <GLCD_SendData>
     b78:	cf 5f       	subi	r28, 0xFF	; 255

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     b7a:	c0 38       	cpi	r28, 0x80	; 128
     b7c:	b9 f7       	brne	.-18     	; 0xb6c <GLCD_ClearDisplay+0x14>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     b7e:	df 5f       	subi	r29, 0xFF	; 255
     b80:	d8 30       	cpi	r29, 0x08	; 8
     b82:	69 f7       	brne	.-38     	; 0xb5e <GLCD_ClearDisplay+0x6>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     b84:	0e 94 c2 02 	call	0x584	; 0x584 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	0e 94 0a 02 	call	0x414	; 0x414 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
     b8e:	10 92 18 01 	sts	0x0118, r1
	GLCD_GoToLine(0);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <DIO_ObtainRegister>:
	DIO_OUTPUT_REG,
	DIO_INPUT_REG
}DIO_RegisterType;

static volatile uint8* DIO_ObtainRegister(DIO_PortType Port, DIO_RegisterType Reg) {
	switch (Port) {
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	c9 f0       	breq	.+50     	; 0xbd4 <DIO_ObtainRegister+0x36>
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	30 f0       	brcs	.+12     	; 0xbb2 <DIO_ObtainRegister+0x14>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	29 f1       	breq	.+74     	; 0xbf4 <DIO_ObtainRegister+0x56>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	09 f0       	breq	.+2      	; 0xbb0 <DIO_ObtainRegister+0x12>
     bae:	42 c0       	rjmp	.+132    	; 0xc34 <DIO_ObtainRegister+0x96>
     bb0:	31 c0       	rjmp	.+98     	; 0xc14 <DIO_ObtainRegister+0x76>
		case DIO_PORT_A: 
			switch (Reg) {
     bb2:	61 30       	cpi	r22, 0x01	; 1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <DIO_ObtainRegister+0x1a>
     bb6:	41 c0       	rjmp	.+130    	; 0xc3a <DIO_ObtainRegister+0x9c>
     bb8:	61 30       	cpi	r22, 0x01	; 1
     bba:	18 f0       	brcs	.+6      	; 0xbc2 <DIO_ObtainRegister+0x24>
     bbc:	62 30       	cpi	r22, 0x02	; 2
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <DIO_ObtainRegister+0x2a>
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <DIO_ObtainRegister+0x30>
			case DIO_DIRECTION_REG: return PORTA_DIR_REG;
     bc2:	8a e3       	ldi	r24, 0x3A	; 58
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	08 95       	ret
	switch (Port) {
		case DIO_PORT_A: 
			switch (Reg) {
			case DIO_DIRECTION_REG: return PORTA_DIR_REG;
			case DIO_OUTPUT_REG: return PORTA_OUT_REG;
			case DIO_INPUT_REG: return PORTA_INP_REG;
     bce:	89 e3       	ldi	r24, 0x39	; 57
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret
			default: break;
			}
			break;
		case DIO_PORT_B: 
			switch (Reg) {
     bd4:	61 30       	cpi	r22, 0x01	; 1
     bd6:	a1 f1       	breq	.+104    	; 0xc40 <DIO_ObtainRegister+0xa2>
     bd8:	61 30       	cpi	r22, 0x01	; 1
     bda:	18 f0       	brcs	.+6      	; 0xbe2 <DIO_ObtainRegister+0x44>
     bdc:	62 30       	cpi	r22, 0x02	; 2
     bde:	21 f4       	brne	.+8      	; 0xbe8 <DIO_ObtainRegister+0x4a>
     be0:	06 c0       	rjmp	.+12     	; 0xbee <DIO_ObtainRegister+0x50>
				case DIO_DIRECTION_REG: return PORTB_DIR_REG;
     be2:	87 e3       	ldi	r24, 0x37	; 55
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	08 95       	ret
			break;
		case DIO_PORT_B: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTB_DIR_REG;
				case DIO_OUTPUT_REG: return PORTB_OUT_REG;
				case DIO_INPUT_REG: return PORTB_INP_REG;
     bee:	86 e3       	ldi	r24, 0x36	; 54
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	08 95       	ret
				default: break;
			}
			break;
		case DIO_PORT_C: 
			switch (Reg) {
     bf4:	61 30       	cpi	r22, 0x01	; 1
     bf6:	39 f1       	breq	.+78     	; 0xc46 <DIO_ObtainRegister+0xa8>
     bf8:	61 30       	cpi	r22, 0x01	; 1
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <DIO_ObtainRegister+0x64>
     bfc:	62 30       	cpi	r22, 0x02	; 2
     bfe:	21 f4       	brne	.+8      	; 0xc08 <DIO_ObtainRegister+0x6a>
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <DIO_ObtainRegister+0x70>
				case DIO_DIRECTION_REG: return PORTC_DIR_REG;
     c02:	84 e3       	ldi	r24, 0x34	; 52
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	08 95       	ret
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	08 95       	ret
			break;
		case DIO_PORT_C: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTC_DIR_REG;
				case DIO_OUTPUT_REG: return PORTC_OUT_REG;
				case DIO_INPUT_REG: return PORTC_INP_REG;
     c0e:	83 e3       	ldi	r24, 0x33	; 51
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	08 95       	ret
				default: break;
			}
			break;
		case DIO_PORT_D: 
			switch (Reg) {
     c14:	61 30       	cpi	r22, 0x01	; 1
     c16:	d1 f0       	breq	.+52     	; 0xc4c <DIO_ObtainRegister+0xae>
     c18:	61 30       	cpi	r22, 0x01	; 1
     c1a:	18 f0       	brcs	.+6      	; 0xc22 <DIO_ObtainRegister+0x84>
     c1c:	62 30       	cpi	r22, 0x02	; 2
     c1e:	21 f4       	brne	.+8      	; 0xc28 <DIO_ObtainRegister+0x8a>
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <DIO_ObtainRegister+0x90>
				case DIO_DIRECTION_REG: return PORTD_DIR_REG;
     c22:	81 e3       	ldi	r24, 0x31	; 49
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	08 95       	ret
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	08 95       	ret
			break;
		case DIO_PORT_D: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTD_DIR_REG;
				case DIO_OUTPUT_REG: return PORTD_OUT_REG;
				case DIO_INPUT_REG: return PORTD_INP_REG;
     c2e:	80 e3       	ldi	r24, 0x30	; 48
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret
				default: break;
			}
			break;
		default: break;
	}
	return NULL_PTR;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 95       	ret
static volatile uint8* DIO_ObtainRegister(DIO_PortType Port, DIO_RegisterType Reg) {
	switch (Port) {
		case DIO_PORT_A: 
			switch (Reg) {
			case DIO_DIRECTION_REG: return PORTA_DIR_REG;
			case DIO_OUTPUT_REG: return PORTA_OUT_REG;
     c3a:	8b e3       	ldi	r24, 0x3B	; 59
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	08 95       	ret
			}
			break;
		case DIO_PORT_B: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTB_DIR_REG;
				case DIO_OUTPUT_REG: return PORTB_OUT_REG;
     c40:	88 e3       	ldi	r24, 0x38	; 56
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	08 95       	ret
			}
			break;
		case DIO_PORT_C: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTC_DIR_REG;
				case DIO_OUTPUT_REG: return PORTC_OUT_REG;
     c46:	85 e3       	ldi	r24, 0x35	; 53
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	08 95       	ret
			}
			break;
		case DIO_PORT_D: 
			switch (Reg) {
				case DIO_DIRECTION_REG: return PORTD_DIR_REG;
				case DIO_OUTPUT_REG: return PORTD_OUT_REG;
     c4c:	82 e3       	ldi	r24, 0x32	; 50
     c4e:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		default: break;
	}
	return NULL_PTR;
}
     c50:	08 95       	ret

00000c52 <DIO_SetPinDirection>:

void DIO_SetPinDirection(DIO_PortType Port, DIO_PinType Pin, DIO_DirectionType Direction) {
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	c6 2f       	mov	r28, r22
     c58:	d4 2f       	mov	r29, r20
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     c60:	fc 01       	movw	r30, r24
	switch (Direction) {
     c62:	dd 23       	and	r29, r29
     c64:	19 f0       	breq	.+6      	; 0xc6c <DIO_SetPinDirection+0x1a>
     c66:	d1 30       	cpi	r29, 0x01	; 1
     c68:	d9 f4       	brne	.+54     	; 0xca0 <DIO_SetPinDirection+0x4e>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <DIO_SetPinDirection+0x36>
		case DIO_INPUT: CLEAR_BIT(*Reg_Ptr, Pin); break;
     c6c:	20 81       	ld	r18, Z
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	ac 01       	movw	r20, r24
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_SetPinDirection+0x28>
     c76:	44 0f       	add	r20, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	ca 95       	dec	r28
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_SetPinDirection+0x24>
     c7e:	ea 01       	movw	r28, r20
     c80:	c0 95       	com	r28
     c82:	c2 23       	and	r28, r18
     c84:	c0 83       	st	Z, r28
     c86:	0c c0       	rjmp	.+24     	; 0xca0 <DIO_SetPinDirection+0x4e>
		case DIO_OUTPUT: SET_BIT(*Reg_Ptr, Pin); break;
     c88:	20 81       	ld	r18, Z
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	ac 01       	movw	r20, r24
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <DIO_SetPinDirection+0x44>
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	ca 95       	dec	r28
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <DIO_SetPinDirection+0x40>
     c9a:	ea 01       	movw	r28, r20
     c9c:	c2 2b       	or	r28, r18
     c9e:	c0 83       	st	Z, r28
		default: break;
	}
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <DIO_WritePin>:

void DIO_WritePin(DIO_PortType Port, DIO_PinType Pin, DIO_StateType State) {
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	c6 2f       	mov	r28, r22
     cac:	d4 2f       	mov	r29, r20
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     cb4:	fc 01       	movw	r30, r24
	switch (State) {
     cb6:	dd 23       	and	r29, r29
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <DIO_WritePin+0x1a>
     cba:	d1 30       	cpi	r29, 0x01	; 1
     cbc:	d9 f4       	brne	.+54     	; 0xcf4 <DIO_WritePin+0x4e>
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <DIO_WritePin+0x36>
		case DIO_LOW: CLEAR_BIT(*Reg_Ptr, Pin); break;
     cc0:	20 81       	ld	r18, Z
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	ac 01       	movw	r20, r24
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_WritePin+0x28>
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	ca 95       	dec	r28
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_WritePin+0x24>
     cd2:	ea 01       	movw	r28, r20
     cd4:	c0 95       	com	r28
     cd6:	c2 23       	and	r28, r18
     cd8:	c0 83       	st	Z, r28
     cda:	0c c0       	rjmp	.+24     	; 0xcf4 <DIO_WritePin+0x4e>
		case DIO_HIGH: SET_BIT(*Reg_Ptr, Pin); break;
     cdc:	20 81       	ld	r18, Z
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	ac 01       	movw	r20, r24
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_WritePin+0x44>
     ce6:	44 0f       	add	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	ca 95       	dec	r28
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_WritePin+0x40>
     cee:	ea 01       	movw	r28, r20
     cf0:	c2 2b       	or	r28, r18
     cf2:	c0 83       	st	Z, r28
		default: break;
	}
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <DIO_TogglePin>:

void DIO_TogglePin(DIO_PortType Port, DIO_PinType Pin) {
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     d06:	fc 01       	movw	r30, r24
	TOGGLE_BIT(*Reg_Ptr, Pin);
     d08:	20 81       	ld	r18, Z
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	ac 01       	movw	r20, r24
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_TogglePin+0x1c>
     d12:	44 0f       	add	r20, r20
     d14:	55 1f       	adc	r21, r21
     d16:	ca 95       	dec	r28
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_TogglePin+0x18>
     d1a:	ea 01       	movw	r28, r20
     d1c:	c2 27       	eor	r28, r18
     d1e:	c0 83       	st	Z, r28
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <DIO_ReadPin>:

DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
     d26:	cf 93       	push	r28
     d28:	c6 2f       	mov	r28, r22
	DIO_StateType eLocal_State = DIO_LOW;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
     d2a:	62 e0       	ldi	r22, 0x02	; 2
     d2c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	eLocal_State = READ_BIT(*Reg_Ptr, Pin);
     d30:	fc 01       	movw	r30, r24
     d32:	80 81       	ld	r24, Z
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_ReadPin+0x16>
     d38:	95 95       	asr	r25
     d3a:	87 95       	ror	r24
     d3c:	ca 95       	dec	r28
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_ReadPin+0x12>
	return eLocal_State;
}
     d40:	81 70       	andi	r24, 0x01	; 1
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
     d46:	cf 93       	push	r28
     d48:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	switch (Direction) {
     d50:	cc 23       	and	r28, r28
     d52:	19 f0       	breq	.+6      	; 0xd5a <DIO_SetPortDirection+0x14>
     d54:	c1 30       	cpi	r28, 0x01	; 1
     d56:	39 f4       	brne	.+14     	; 0xd66 <DIO_SetPortDirection+0x20>
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <DIO_SetPortDirection+0x1a>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
     d5a:	fc 01       	movw	r30, r24
     d5c:	10 82       	st	Z, r1
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <DIO_SetPortDirection+0x20>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
     d60:	2f ef       	ldi	r18, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
		default: break;
	}
}
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8 Value) {
     d6a:	cf 93       	push	r28
     d6c:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	*Reg_Ptr = Value;
     d74:	fc 01       	movw	r30, r24
     d76:	c0 83       	st	Z, r28
}
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <DIO_ReadPort>:

uint8 DIO_ReadPort(DIO_PortType Port) {
	uint8 u8Local_Value = 0x00U;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	u8Local_Value = *Reg_Ptr;
     d82:	fc 01       	movw	r30, r24
     d84:	80 81       	ld	r24, Z
	return u8Local_Value;
}
     d86:	08 95       	ret

00000d88 <DIO_SetHighHalfPortDirection>:

void DIO_SetHighHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
     d88:	cf 93       	push	r28
     d8a:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     d92:	fc 01       	movw	r30, r24
	switch (Direction) {
     d94:	cc 23       	and	r28, r28
     d96:	19 f0       	breq	.+6      	; 0xd9e <DIO_SetHighHalfPortDirection+0x16>
     d98:	c1 30       	cpi	r28, 0x01	; 1
     d9a:	41 f4       	brne	.+16     	; 0xdac <DIO_SetHighHalfPortDirection+0x24>
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <DIO_SetHighHalfPortDirection+0x1e>
		case DIO_INPUT: *Reg_Ptr &= ~(0xF0U); break;
     d9e:	80 81       	ld	r24, Z
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	80 83       	st	Z, r24
     da4:	03 c0       	rjmp	.+6      	; 0xdac <DIO_SetHighHalfPortDirection+0x24>
		case DIO_OUTPUT: *Reg_Ptr |= (0xF0U); break;
     da6:	80 81       	ld	r24, Z
     da8:	80 6f       	ori	r24, 0xF0	; 240
     daa:	80 83       	st	Z, r24
		default: break;
	}
}
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <DIO_SetLowHalfPortDirection>:

void DIO_SetLowHalfPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
     db0:	cf 93       	push	r28
     db2:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     dba:	fc 01       	movw	r30, r24
	switch (Direction) {
     dbc:	cc 23       	and	r28, r28
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <DIO_SetLowHalfPortDirection+0x16>
     dc0:	c1 30       	cpi	r28, 0x01	; 1
     dc2:	41 f4       	brne	.+16     	; 0xdd4 <DIO_SetLowHalfPortDirection+0x24>
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <DIO_SetLowHalfPortDirection+0x1e>
		case DIO_INPUT: *Reg_Ptr &= ~(0x0FU); break;
     dc6:	80 81       	ld	r24, Z
     dc8:	80 7f       	andi	r24, 0xF0	; 240
     dca:	80 83       	st	Z, r24
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <DIO_SetLowHalfPortDirection+0x24>
		case DIO_OUTPUT: *Reg_Ptr |= (0x0FU); break;
     dce:	80 81       	ld	r24, Z
     dd0:	8f 60       	ori	r24, 0x0F	; 15
     dd2:	80 83       	st	Z, r24
		default: break;
	}
}
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <DIO_WriteHighHalfPort>:

void DIO_WriteHighHalfPort(DIO_PortType Port, uint8 HighValue) {
     dd8:	cf 93       	push	r28
     dda:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     de2:	fc 01       	movw	r30, r24
	*Reg_Ptr &= (0x0FU);
     de4:	80 81       	ld	r24, Z
     de6:	8f 70       	andi	r24, 0x0F	; 15
     de8:	80 83       	st	Z, r24
	*Reg_Ptr |= (HighValue & 0xF0U);
     dea:	80 81       	ld	r24, Z
     dec:	c0 7f       	andi	r28, 0xF0	; 240
     dee:	c8 2b       	or	r28, r24
     df0:	c0 83       	st	Z, r28
}
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <DIO_WriteLowHalfPort>:

void DIO_WriteLowHalfPort(DIO_PortType Port, uint8 LowValue) {
     df6:	cf 93       	push	r28
     df8:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
     e00:	fc 01       	movw	r30, r24
	*Reg_Ptr &= (0xF0U);
     e02:	80 81       	ld	r24, Z
     e04:	80 7f       	andi	r24, 0xF0	; 240
     e06:	80 83       	st	Z, r24
	*Reg_Ptr |= (LowValue & 0x0F);
     e08:	80 81       	ld	r24, Z
     e0a:	cf 70       	andi	r28, 0x0F	; 15
     e0c:	c8 2b       	or	r28, r24
     e0e:	c0 83       	st	Z, r28
}
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <DIO_ReadHighHalfPort>:

uint8 DIO_ReadHighHalfPort(DIO_PortType Port) {
	uint8 u8Local_Value = 0x00U;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
     e14:	62 e0       	ldi	r22, 0x02	; 2
     e16:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	u8Local_Value = (((*Reg_Ptr) & 0xF0U)>>4);
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
	return u8Local_Value;
}
     e1e:	82 95       	swap	r24
     e20:	8f 70       	andi	r24, 0x0F	; 15
     e22:	08 95       	ret

00000e24 <DIO_ReadLowHalfPort>:

uint8 DIO_ReadLowHalfPort(DIO_PortType Port) {
	uint8 u8Local_Value = 0x00U;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	0e 94 cf 05 	call	0xb9e	; 0xb9e <DIO_ObtainRegister>
	u8Local_Value = ((*Reg_Ptr) & 0x0FU);
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
	return u8Local_Value;
}
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	08 95       	ret

00000e32 <PWM_SetDuty>:
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
		default: break;
	}
}

void PWM_SetDuty(PWM_ChannelType Tmr_Channel, PWM_OutputStateType State, uint16 Duty_Percent) {
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
	switch (Tmr_Channel) {
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	f1 f1       	breq	.+124    	; 0xeba <PWM_SetDuty+0x88>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	38 f0       	brcs	.+14     	; 0xe50 <PWM_SetDuty+0x1e>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f4       	brne	.+2      	; 0xe48 <PWM_SetDuty+0x16>
     e46:	85 c0       	rjmp	.+266    	; 0xf52 <PWM_SetDuty+0x120>
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	09 f0       	breq	.+2      	; 0xe4e <PWM_SetDuty+0x1c>
     e4c:	01 c1       	rjmp	.+514    	; 0x1050 <PWM_SetDuty+0x21e>
     e4e:	cd c0       	rjmp	.+410    	; 0xfea <PWM_SetDuty+0x1b8>
		case PWM_TIMER_0_CHANNEL:
			switch (State) {
     e50:	66 23       	and	r22, r22
     e52:	21 f0       	breq	.+8      	; 0xe5c <PWM_SetDuty+0x2a>
     e54:	61 30       	cpi	r22, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <PWM_SetDuty+0x28>
     e58:	fb c0       	rjmp	.+502    	; 0x1050 <PWM_SetDuty+0x21e>
     e5a:	12 c0       	rjmp	.+36     	; 0xe80 <PWM_SetDuty+0x4e>
				case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_0_RESOLUTION / 100.0); break;
     e5c:	74 2f       	mov	r23, r20
     e5e:	66 27       	eor	r22, r22
     e60:	64 1b       	sub	r22, r20
     e62:	75 0b       	sbc	r23, r21
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	48 ec       	ldi	r20, 0xC8	; 200
     e72:	52 e4       	ldi	r21, 0x42	; 66
     e74:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     e78:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     e7c:	6c bf       	out	0x3c, r22	; 60
     e7e:	e8 c0       	rjmp	.+464    	; 0x1050 <PWM_SetDuty+0x21e>
				case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
     e80:	ba 01       	movw	r22, r20
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	88 ec       	ldi	r24, 0xC8	; 200
     e94:	92 e4       	ldi	r25, 0x42	; 66
     e96:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	53 e4       	ldi	r21, 0x43	; 67
     ea2:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	48 ec       	ldi	r20, 0xC8	; 200
     eac:	52 e4       	ldi	r21, 0x42	; 66
     eae:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     eb2:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     eb6:	6c bf       	out	0x3c, r22	; 60
     eb8:	cb c0       	rjmp	.+406    	; 0x1050 <PWM_SetDuty+0x21e>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_A:
			switch (State) {
     eba:	66 23       	and	r22, r22
     ebc:	21 f0       	breq	.+8      	; 0xec6 <PWM_SetDuty+0x94>
     ebe:	61 30       	cpi	r22, 0x01	; 1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <PWM_SetDuty+0x92>
     ec2:	c6 c0       	rjmp	.+396    	; 0x1050 <PWM_SetDuty+0x21e>
     ec4:	1c c0       	rjmp	.+56     	; 0xefe <PWM_SetDuty+0xcc>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
     ec6:	80 91 1b 01 	lds	r24, 0x011B
     eca:	90 91 1c 01 	lds	r25, 0x011C
     ece:	48 9f       	mul	r20, r24
     ed0:	b0 01       	movw	r22, r0
     ed2:	49 9f       	mul	r20, r25
     ed4:	70 0d       	add	r23, r0
     ed6:	58 9f       	mul	r21, r24
     ed8:	70 0d       	add	r23, r0
     eda:	11 24       	eor	r1, r1
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	48 ec       	ldi	r20, 0xC8	; 200
     eea:	52 e4       	ldi	r21, 0x42	; 66
     eec:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     ef0:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9b bd       	out	0x2b, r25	; 43
     efa:	8a bd       	out	0x2a, r24	; 42
     efc:	a9 c0       	rjmp	.+338    	; 0x1050 <PWM_SetDuty+0x21e>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     efe:	ba 01       	movw	r22, r20
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     f08:	9b 01       	movw	r18, r22
     f0a:	ac 01       	movw	r20, r24
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	88 ec       	ldi	r24, 0xC8	; 200
     f12:	92 e4       	ldi	r25, 0x42	; 66
     f14:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
     f18:	6b 01       	movw	r12, r22
     f1a:	7c 01       	movw	r14, r24
     f1c:	60 91 1b 01 	lds	r22, 0x011B
     f20:	70 91 1c 01 	lds	r23, 0x011C
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	c7 01       	movw	r24, r14
     f32:	b6 01       	movw	r22, r12
     f34:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	48 ec       	ldi	r20, 0xC8	; 200
     f3e:	52 e4       	ldi	r21, 0x42	; 66
     f40:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     f44:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9b bd       	out	0x2b, r25	; 43
     f4e:	8a bd       	out	0x2a, r24	; 42
     f50:	7f c0       	rjmp	.+254    	; 0x1050 <PWM_SetDuty+0x21e>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (State) {
     f52:	66 23       	and	r22, r22
     f54:	21 f0       	breq	.+8      	; 0xf5e <PWM_SetDuty+0x12c>
     f56:	61 30       	cpi	r22, 0x01	; 1
     f58:	09 f0       	breq	.+2      	; 0xf5c <PWM_SetDuty+0x12a>
     f5a:	7a c0       	rjmp	.+244    	; 0x1050 <PWM_SetDuty+0x21e>
     f5c:	1c c0       	rjmp	.+56     	; 0xf96 <PWM_SetDuty+0x164>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)(Duty_Percent * gu16_PWM_TimerTopValue / 100.0); break;
     f5e:	80 91 1b 01 	lds	r24, 0x011B
     f62:	90 91 1c 01 	lds	r25, 0x011C
     f66:	48 9f       	mul	r20, r24
     f68:	b0 01       	movw	r22, r0
     f6a:	49 9f       	mul	r20, r25
     f6c:	70 0d       	add	r23, r0
     f6e:	58 9f       	mul	r21, r24
     f70:	70 0d       	add	r23, r0
     f72:	11 24       	eor	r1, r1
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	48 ec       	ldi	r20, 0xC8	; 200
     f82:	52 e4       	ldi	r21, 0x42	; 66
     f84:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     f88:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	99 bd       	out	0x29, r25	; 41
     f92:	88 bd       	out	0x28, r24	; 40
     f94:	5d c0       	rjmp	.+186    	; 0x1050 <PWM_SetDuty+0x21e>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
     f96:	ba 01       	movw	r22, r20
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	88 ec       	ldi	r24, 0xC8	; 200
     faa:	92 e4       	ldi	r25, 0x42	; 66
     fac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
     fb0:	6b 01       	movw	r12, r22
     fb2:	7c 01       	movw	r14, r24
     fb4:	60 91 1b 01 	lds	r22, 0x011B
     fb8:	70 91 1c 01 	lds	r23, 0x011C
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	c7 01       	movw	r24, r14
     fca:	b6 01       	movw	r22, r12
     fcc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	48 ec       	ldi	r20, 0xC8	; 200
     fd6:	52 e4       	ldi	r21, 0x42	; 66
     fd8:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
     fdc:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	99 bd       	out	0x29, r25	; 41
     fe6:	88 bd       	out	0x28, r24	; 40
     fe8:	33 c0       	rjmp	.+102    	; 0x1050 <PWM_SetDuty+0x21e>
				default: break;
			}
			break;
		case PWM_TIMER_2_CHANNEL:
			switch (State) {
     fea:	66 23       	and	r22, r22
     fec:	19 f0       	breq	.+6      	; 0xff4 <PWM_SetDuty+0x1c2>
     fee:	61 30       	cpi	r22, 0x01	; 1
     ff0:	79 f5       	brne	.+94     	; 0x1050 <PWM_SetDuty+0x21e>
     ff2:	12 c0       	rjmp	.+36     	; 0x1018 <PWM_SetDuty+0x1e6>
				case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)(Duty_Percent * PWM_TIMER_2_RESOLUTION / 100.0); break;
     ff4:	74 2f       	mov	r23, r20
     ff6:	66 27       	eor	r22, r22
     ff8:	64 1b       	sub	r22, r20
     ffa:	75 0b       	sbc	r23, r21
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	48 ec       	ldi	r20, 0xC8	; 200
    100a:	52 e4       	ldi	r21, 0x42	; 66
    100c:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1010:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1014:	63 bd       	out	0x23, r22	; 35
    1016:	1c c0       	rjmp	.+56     	; 0x1050 <PWM_SetDuty+0x21e>
				case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    1018:	ba 01       	movw	r22, r20
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	92 e4       	ldi	r25, 0x42	; 66
    102e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	53 e4       	ldi	r21, 0x43	; 67
    103a:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	48 ec       	ldi	r20, 0xC8	; 200
    1044:	52 e4       	ldi	r21, 0x42	; 66
    1046:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    104a:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    104e:	63 bd       	out	0x23, r22	; 35
				default: break;
			}
			break;
		default: break;
	}
}
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	08 95       	ret

0000105a <PWM_InitTimer0>:

/************************************************************************/
/*				Private Functions Implementations                       */
/************************************************************************/
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
    105a:	fc 01       	movw	r30, r24
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	SET_BIT(*PORTB_DIR_REG, 3U);
    105c:	bb 9a       	sbi	0x17, 3	; 23
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    105e:	13 be       	out	0x33, r1	; 51
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
    1060:	93 b7       	in	r25, 0x33	; 51
    1062:	90 64       	ori	r25, 0x40	; 64
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	88 0f       	add	r24, r24
    1068:	88 0f       	add	r24, r24
    106a:	88 0f       	add	r24, r24
    106c:	89 2b       	or	r24, r25
    106e:	83 bf       	out	0x33, r24	; 51
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
    1070:	93 b7       	in	r25, 0x33	; 51
    1072:	90 62       	ori	r25, 0x20	; 32
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	82 95       	swap	r24
    1078:	80 7f       	andi	r24, 0xF0	; 240
    107a:	89 2b       	or	r24, r25
    107c:	83 bf       	out	0x33, r24	; 51
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	71 f0       	breq	.+28     	; 0x10a0 <PWM_InitTimer0+0x46>
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	18 f4       	brcc	.+6      	; 0x108e <PWM_InitTimer0+0x34>
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	90 f4       	brcc	.+36     	; 0x10b0 <PWM_InitTimer0+0x56>
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <PWM_InitTimer0+0x3e>
    108e:	98 2f       	mov	r25, r24
    1090:	96 50       	subi	r25, 0x06	; 6
    1092:	94 30       	cpi	r25, 0x04	; 4
    1094:	68 f4       	brcc	.+26     	; 0x10b0 <PWM_InitTimer0+0x56>
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <PWM_InitTimer0+0x4e>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    1098:	93 b7       	in	r25, 0x33	; 51
    109a:	89 2b       	or	r24, r25
    109c:	83 bf       	out	0x33, r24	; 51
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <PWM_InitTimer0+0x56>
		case PWM_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    10a0:	83 b7       	in	r24, 0x33	; 51
    10a2:	83 60       	ori	r24, 0x03	; 3
    10a4:	83 bf       	out	0x33, r24	; 51
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <PWM_InitTimer0+0x56>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    10a8:	93 b7       	in	r25, 0x33	; 51
    10aa:	82 50       	subi	r24, 0x02	; 2
    10ac:	89 2b       	or	r24, r25
    10ae:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
    10b0:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
    10b2:	83 81       	ldd	r24, Z+3	; 0x03
    10b4:	88 23       	and	r24, r24
    10b6:	19 f0       	breq	.+6      	; 0x10be <PWM_InitTimer0+0x64>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 f5       	brne	.+100    	; 0x1120 <PWM_InitTimer0+0xc6>
    10bc:	14 c0       	rjmp	.+40     	; 0x10e6 <PWM_InitTimer0+0x8c>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    10be:	80 85       	ldd	r24, Z+8	; 0x08
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	78 2f       	mov	r23, r24
    10c4:	66 27       	eor	r22, r22
    10c6:	68 1b       	sub	r22, r24
    10c8:	79 0b       	sbc	r23, r25
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	48 ec       	ldi	r20, 0xC8	; 200
    10d8:	52 e4       	ldi	r21, 0x42	; 66
    10da:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    10de:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    10e2:	6c bf       	out	0x3c, r22	; 60
    10e4:	1d c0       	rjmp	.+58     	; 0x1120 <PWM_InitTimer0+0xc6>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    10e6:	60 85       	ldd	r22, Z+8	; 0x08
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__floatsisf>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	88 ec       	ldi	r24, 0xC8	; 200
    10fc:	92 e4       	ldi	r25, 0x42	; 66
    10fe:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	53 e4       	ldi	r21, 0x43	; 67
    110a:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	48 ec       	ldi	r20, 0xC8	; 200
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    111a:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    111e:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
    1120:	12 be       	out	0x32, r1	; 50
}
    1122:	08 95       	ret

00001124 <PWM_InitTimer1>:

void PWM_InitTimer1(const PWM_ConfigurationType* Config_Ptr) {
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
	/* Make PD5=OC1A or PD4=OC1B as output */
	switch (Config_Ptr->Tmr_Channel) {
    1132:	88 81       	ld	r24, Y
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	19 f0       	breq	.+6      	; 0x113e <PWM_InitTimer1+0x1a>
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	21 f4       	brne	.+8      	; 0x1144 <PWM_InitTimer1+0x20>
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <PWM_InitTimer1+0x1e>
		case PWM_TIMER_1_CHANNEL_A:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_5, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 5U);
    113e:	8d 9a       	sbi	0x11, 5	; 17
			break;
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <PWM_InitTimer1+0x20>
		case PWM_TIMER_1_CHANNEL_B:
			//DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_4, DIO_OUTPUT);
			SET_BIT(*PORTD_DIR_REG, 4U);
    1142:	8c 9a       	sbi	0x11, 4	; 17
			break;
		default: break;
	}
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
    1144:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
    1146:	1e bc       	out	0x2e, r1	; 46
	/* Set PWM Mode */
	*TIMER1_CTRL_REG_A |= (0x02U);
    1148:	8f b5       	in	r24, 0x2f	; 47
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	8f bd       	out	0x2f, r24	; 47
	*TIMER1_CTRL_REG_B |= (1U<<4U) | ((Config_Ptr->Mode)<<PWM_TIMER_1_FAST_BIT);
    114e:	9e b5       	in	r25, 0x2e	; 46
    1150:	90 61       	ori	r25, 0x10	; 16
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	88 0f       	add	r24, r24
    1156:	88 0f       	add	r24, r24
    1158:	88 0f       	add	r24, r24
    115a:	89 2b       	or	r24, r25
    115c:	8e bd       	out	0x2e, r24	; 46
	/* Set Output State and Channel OC1A or OC1B */
	switch (Config_Ptr->Tmr_Channel) {
    115e:	88 81       	ld	r24, Y
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	19 f0       	breq	.+6      	; 0x116a <PWM_InitTimer1+0x46>
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	89 f4       	brne	.+34     	; 0x118a <PWM_InitTimer1+0x66>
    1168:	09 c0       	rjmp	.+18     	; 0x117c <PWM_InitTimer1+0x58>
		case PWM_TIMER_1_CHANNEL_A:
			*TIMER1_CTRL_REG_A |= (1U<<7U) | ((Config_Ptr->State)<<PWM_TIMER_1_A_INVERTING_BIT);
    116a:	9f b5       	in	r25, 0x2f	; 47
    116c:	90 68       	ori	r25, 0x80	; 128
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	82 95       	swap	r24
    1172:	88 0f       	add	r24, r24
    1174:	88 0f       	add	r24, r24
    1176:	80 7c       	andi	r24, 0xC0	; 192
    1178:	89 2b       	or	r24, r25
    117a:	8f bd       	out	0x2f, r24	; 47
		case PWM_TIMER_1_CHANNEL_B: 
			*TIMER1_CTRL_REG_A |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_1_B_INVERTING_BIT);
    117c:	9f b5       	in	r25, 0x2f	; 47
    117e:	90 62       	ori	r25, 0x20	; 32
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	82 95       	swap	r24
    1184:	80 7f       	andi	r24, 0xF0	; 240
    1186:	89 2b       	or	r24, r25
    1188:	8f bd       	out	0x2f, r24	; 47
			break;
		default: break;
	}
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	71 f0       	breq	.+28     	; 0x11ac <PWM_InitTimer1+0x88>
    1190:	85 30       	cpi	r24, 0x05	; 5
    1192:	18 f4       	brcc	.+6      	; 0x119a <PWM_InitTimer1+0x76>
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	90 f4       	brcc	.+36     	; 0x11bc <PWM_InitTimer1+0x98>
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <PWM_InitTimer1+0x80>
    119a:	98 2f       	mov	r25, r24
    119c:	96 50       	subi	r25, 0x06	; 6
    119e:	94 30       	cpi	r25, 0x04	; 4
    11a0:	68 f4       	brcc	.+26     	; 0x11bc <PWM_InitTimer1+0x98>
    11a2:	08 c0       	rjmp	.+16     	; 0x11b4 <PWM_InitTimer1+0x90>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
    11a4:	9e b5       	in	r25, 0x2e	; 46
    11a6:	89 2b       	or	r24, r25
    11a8:	8e bd       	out	0x2e, r24	; 46
    11aa:	08 c0       	rjmp	.+16     	; 0x11bc <PWM_InitTimer1+0x98>
		case PWM_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
    11ac:	8e b5       	in	r24, 0x2e	; 46
    11ae:	83 60       	ori	r24, 0x03	; 3
    11b0:	8e bd       	out	0x2e, r24	; 46
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <PWM_InitTimer1+0x98>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
    11b4:	9e b5       	in	r25, 0x2e	; 46
    11b6:	82 50       	subi	r24, 0x02	; 2
    11b8:	89 2b       	or	r24, r25
    11ba:	8e bd       	out	0x2e, r24	; 46
		default: break;
	}
	/* Set Period through TOP Value in ICR1 Register */
	gu16_PWM_TimerTopValue = (uint16)((F_CPU * (Config_Ptr->Period_ms) / ((Config_Ptr->Prescale_Value) * 1000.0)) - 1U);
    11bc:	6e 81       	ldd	r22, Y+6	; 0x06
    11be:	7f 81       	ldd	r23, Y+7	; 0x07
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	34 e2       	ldi	r19, 0x24	; 36
    11c8:	44 ef       	ldi	r20, 0xF4	; 244
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    11d0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    11d4:	6b 01       	movw	r12, r22
    11d6:	7c 01       	movw	r14, r24
    11d8:	6c 81       	ldd	r22, Y+4	; 0x04
    11da:	7d 81       	ldd	r23, Y+5	; 0x05
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	4a e7       	ldi	r20, 0x7A	; 122
    11ea:	54 e4       	ldi	r21, 0x44	; 68
    11ec:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	c7 01       	movw	r24, r14
    11f6:	b6 01       	movw	r22, r12
    11f8:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1208:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	90 93 1c 01 	sts	0x011C, r25
    1214:	80 93 1b 01 	sts	0x011B, r24
	*(uint16*)TIMER1_INP_CAPT_REG_L = gu16_PWM_TimerTopValue;
    1218:	97 bd       	out	0x27, r25	; 39
    121a:	86 bd       	out	0x26, r24	; 38
	/* Set Duty Value in OCR1A or OCR1B Register */
	switch (Config_Ptr->Tmr_Channel) {
    121c:	88 81       	ld	r24, Y
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	21 f0       	breq	.+8      	; 0x122a <PWM_InitTimer1+0x106>
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	09 f0       	breq	.+2      	; 0x1228 <PWM_InitTimer1+0x104>
    1226:	a0 c0       	rjmp	.+320    	; 0x1368 <PWM_InitTimer1+0x244>
    1228:	50 c0       	rjmp	.+160    	; 0x12ca <PWM_InitTimer1+0x1a6>
		case PWM_TIMER_1_CHANNEL_A:
			switch (Config_Ptr->State) {
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 23       	and	r24, r24
    122e:	21 f0       	breq	.+8      	; 0x1238 <PWM_InitTimer1+0x114>
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	09 f0       	breq	.+2      	; 0x1236 <PWM_InitTimer1+0x112>
    1234:	99 c0       	rjmp	.+306    	; 0x1368 <PWM_InitTimer1+0x244>
    1236:	1e c0       	rjmp	.+60     	; 0x1274 <PWM_InitTimer1+0x150>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1238:	28 85       	ldd	r18, Y+8	; 0x08
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	80 91 1b 01 	lds	r24, 0x011B
    1240:	90 91 1c 01 	lds	r25, 0x011C
    1244:	28 9f       	mul	r18, r24
    1246:	b0 01       	movw	r22, r0
    1248:	29 9f       	mul	r18, r25
    124a:	70 0d       	add	r23, r0
    124c:	38 9f       	mul	r19, r24
    124e:	70 0d       	add	r23, r0
    1250:	11 24       	eor	r1, r1
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	48 ec       	ldi	r20, 0xC8	; 200
    1260:	52 e4       	ldi	r21, 0x42	; 66
    1262:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1266:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9b bd       	out	0x2b, r25	; 43
    1270:	8a bd       	out	0x2a, r24	; 42
    1272:	7a c0       	rjmp	.+244    	; 0x1368 <PWM_InitTimer1+0x244>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_A_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1274:	68 85       	ldd	r22, Y+8	; 0x08
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__floatsisf>
    1280:	9b 01       	movw	r18, r22
    1282:	ac 01       	movw	r20, r24
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	92 e4       	ldi	r25, 0x42	; 66
    128c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
    1294:	60 91 1b 01 	lds	r22, 0x011B
    1298:	70 91 1c 01 	lds	r23, 0x011C
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	48 ec       	ldi	r20, 0xC8	; 200
    12b6:	52 e4       	ldi	r21, 0x42	; 66
    12b8:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    12bc:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9b bd       	out	0x2b, r25	; 43
    12c6:	8a bd       	out	0x2a, r24	; 42
    12c8:	4f c0       	rjmp	.+158    	; 0x1368 <PWM_InitTimer1+0x244>
				default: break;
			}
			break;
		case PWM_TIMER_1_CHANNEL_B:
			switch (Config_Ptr->State) {
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 23       	and	r24, r24
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <PWM_InitTimer1+0x1b4>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <PWM_InitTimer1+0x1b2>
    12d4:	49 c0       	rjmp	.+146    	; 0x1368 <PWM_InitTimer1+0x244>
    12d6:	1e c0       	rjmp	.+60     	; 0x1314 <PWM_InitTimer1+0x1f0>
				case PWM_NON_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    12d8:	28 85       	ldd	r18, Y+8	; 0x08
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	80 91 1b 01 	lds	r24, 0x011B
    12e0:	90 91 1c 01 	lds	r25, 0x011C
    12e4:	28 9f       	mul	r18, r24
    12e6:	b0 01       	movw	r22, r0
    12e8:	29 9f       	mul	r18, r25
    12ea:	70 0d       	add	r23, r0
    12ec:	38 9f       	mul	r19, r24
    12ee:	70 0d       	add	r23, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	48 ec       	ldi	r20, 0xC8	; 200
    1300:	52 e4       	ldi	r21, 0x42	; 66
    1302:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1306:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	99 bd       	out	0x29, r25	; 41
    1310:	88 bd       	out	0x28, r24	; 40
    1312:	2a c0       	rjmp	.+84     	; 0x1368 <PWM_InitTimer1+0x244>
				case PWM_INVERTED: *(uint16*)TIMER1_CMP_B_REG_L = (uint16)((100.0 - Config_Ptr->Duty_Percent) * gu16_PWM_TimerTopValue / 100.0); break;
    1314:	68 85       	ldd	r22, Y+8	; 0x08
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__floatsisf>
    1320:	9b 01       	movw	r18, r22
    1322:	ac 01       	movw	r20, r24
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	92 e4       	ldi	r25, 0x42	; 66
    132c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1330:	6b 01       	movw	r12, r22
    1332:	7c 01       	movw	r14, r24
    1334:	60 91 1b 01 	lds	r22, 0x011B
    1338:	70 91 1c 01 	lds	r23, 0x011C
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	c7 01       	movw	r24, r14
    134a:	b6 01       	movw	r22, r12
    134c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	48 ec       	ldi	r20, 0xC8	; 200
    1356:	52 e4       	ldi	r21, 0x42	; 66
    1358:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    135c:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	99 bd       	out	0x29, r25	; 41
    1366:	88 bd       	out	0x28, r24	; 40
			}
			break;
		default: break;
	}
	/* Clear TCNT1 Register Configuration */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    1368:	1d bc       	out	0x2d, r1	; 45
    136a:	1c bc       	out	0x2c, r1	; 44
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <PWM_InitTimer2>:

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
    137a:	fc 01       	movw	r30, r24
	/* Make PD7=OC2 as output */
	// DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_7, DIO_OUTPUT);
	SET_BIT(*PORTD_DIR_REG, 7U);
    137c:	8f 9a       	sbi	0x11, 7	; 17
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
    137e:	15 bc       	out	0x25, r1	; 37
	/* Set PWM Mode */
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
    1380:	95 b5       	in	r25, 0x25	; 37
    1382:	90 64       	ori	r25, 0x40	; 64
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	88 0f       	add	r24, r24
    1388:	88 0f       	add	r24, r24
    138a:	88 0f       	add	r24, r24
    138c:	89 2b       	or	r24, r25
    138e:	85 bd       	out	0x25, r24	; 37
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
    1390:	93 b7       	in	r25, 0x33	; 51
    1392:	90 62       	ori	r25, 0x20	; 32
    1394:	83 81       	ldd	r24, Z+3	; 0x03
    1396:	82 95       	swap	r24
    1398:	80 7f       	andi	r24, 0xF0	; 240
    139a:	89 2b       	or	r24, r25
    139c:	83 bf       	out	0x33, r24	; 51
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	98 2f       	mov	r25, r24
    13a2:	98 50       	subi	r25, 0x08	; 8
    13a4:	92 30       	cpi	r25, 0x02	; 2
    13a6:	18 f0       	brcs	.+6      	; 0x13ae <PWM_InitTimer2+0x34>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    13a8:	95 b5       	in	r25, 0x25	; 37
    13aa:	89 2b       	or	r24, r25
    13ac:	85 bd       	out	0x25, r24	; 37
	}
	/* Set Duty Value in OCR2 Register */
	*TIMER2_CMP_REG = 0x00U;
    13ae:	13 bc       	out	0x23, r1	; 35
	switch (Config_Ptr->State) {
    13b0:	83 81       	ldd	r24, Z+3	; 0x03
    13b2:	88 23       	and	r24, r24
    13b4:	19 f0       	breq	.+6      	; 0x13bc <PWM_InitTimer2+0x42>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 f5       	brne	.+100    	; 0x141e <PWM_InitTimer2+0xa4>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <PWM_InitTimer2+0x6a>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    13bc:	80 85       	ldd	r24, Z+8	; 0x08
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	78 2f       	mov	r23, r24
    13c2:	66 27       	eor	r22, r22
    13c4:	68 1b       	sub	r22, r24
    13c6:	79 0b       	sbc	r23, r25
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	48 ec       	ldi	r20, 0xC8	; 200
    13d6:	52 e4       	ldi	r21, 0x42	; 66
    13d8:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    13dc:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    13e0:	63 bd       	out	0x23, r22	; 35
    13e2:	1d c0       	rjmp	.+58     	; 0x141e <PWM_InitTimer2+0xa4>
		case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
    13e4:	60 85       	ldd	r22, Z+8	; 0x08
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 db 10 	call	0x21b6	; 0x21b6 <__floatsisf>
    13f0:	9b 01       	movw	r18, r22
    13f2:	ac 01       	movw	r20, r24
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	88 ec       	ldi	r24, 0xC8	; 200
    13fa:	92 e4       	ldi	r25, 0x42	; 66
    13fc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	53 e4       	ldi	r21, 0x43	; 67
    1408:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	48 ec       	ldi	r20, 0xC8	; 200
    1412:	52 e4       	ldi	r21, 0x42	; 66
    1414:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1418:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    141c:	63 bd       	out	0x23, r22	; 35
		default: break;
	}
	/* Clear TCNT2 Register Configurations */
	*TIMER2_CNTR_REG = 0x00U;
    141e:	14 bc       	out	0x24, r1	; 36
}
    1420:	08 95       	ret

00001422 <PWM_Init>:

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
    1422:	fc 01       	movw	r30, r24
    1424:	20 81       	ld	r18, Z
    1426:	23 30       	cpi	r18, 0x03	; 3
    1428:	18 f4       	brcc	.+6      	; 0x1430 <PWM_Init+0xe>
    142a:	21 30       	cpi	r18, 0x01	; 1
    142c:	38 f4       	brcc	.+14     	; 0x143c <PWM_Init+0x1a>
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <PWM_Init+0x14>
    1430:	23 30       	cpi	r18, 0x03	; 3
    1432:	49 f4       	brne	.+18     	; 0x1446 <PWM_Init+0x24>
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <PWM_Init+0x20>
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
    1436:	0e 94 2d 08 	call	0x105a	; 0x105a <PWM_InitTimer0>
    143a:	08 95       	ret
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
    143c:	0e 94 92 08 	call	0x1124	; 0x1124 <PWM_InitTimer1>
    1440:	08 95       	ret
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
    1442:	0e 94 bd 09 	call	0x137a	; 0x137a <PWM_InitTimer2>
    1446:	08 95       	ret

00001448 <PWMDrawer_Init>:
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
	#if GENERATE_PWM_FROM_SAME_MCU == 1
		GLCD_Init();
    1448:	0e 94 5f 02 	call	0x4be	; 0x4be <GLCD_Init>
		GLCD_ClearDisplay();
    144c:	0e 94 ac 05 	call	0xb58	; 0xb58 <GLCD_ClearDisplay>
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
    1450:	8a e0       	ldi	r24, 0x0A	; 10
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 11 0a 	call	0x1422	; 0x1422 <PWM_Init>
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
    1458:	80 e6       	ldi	r24, 0x60	; 96
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ICU_Init>
		GLCD_ClearDisplay();
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
	#else
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
	#endif
}
    1460:	08 95       	ret

00001462 <PWMDrawer_MeasureSignal>:

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
    1462:	8f 92       	push	r8
    1464:	9f 92       	push	r9
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	28 97       	sbiw	r28, 0x08	; 8
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	8c 01       	movw	r16, r24
	ICU_DutyCycleType strLocal_Duty = {0, 0};
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	dc 01       	movw	r26, r24
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	ab 83       	std	Y+3, r26	; 0x03
    1498:	bc 83       	std	Y+4, r27	; 0x04
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	af 83       	std	Y+7, r26	; 0x07
    14a0:	b8 87       	std	Y+8, r27	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, PWM_PRESCALE_64, &strLocal_Duty);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	64 e0       	ldi	r22, 0x04	; 4
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	ae 01       	movw	r20, r28
    14aa:	4f 5f       	subi	r20, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	0e 94 9a 01 	call	0x334	; 0x334 <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
    14b2:	cd 80       	ldd	r12, Y+5	; 0x05
    14b4:	de 80       	ldd	r13, Y+6	; 0x06
    14b6:	ef 80       	ldd	r14, Y+7	; 0x07
    14b8:	f8 84       	ldd	r15, Y+8	; 0x08
    14ba:	f8 01       	movw	r30, r16
    14bc:	c1 86       	std	Z+9, r12	; 0x09
    14be:	d2 86       	std	Z+10, r13	; 0x0a
    14c0:	e3 86       	std	Z+11, r14	; 0x0b
    14c2:	f4 86       	std	Z+12, r15	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
    14c4:	89 80       	ldd	r8, Y+1	; 0x01
    14c6:	9a 80       	ldd	r9, Y+2	; 0x02
    14c8:	ab 80       	ldd	r10, Y+3	; 0x03
    14ca:	bc 80       	ldd	r11, Y+4	; 0x04
    14cc:	81 82       	std	Z+1, r8	; 0x01
    14ce:	92 82       	std	Z+2, r9	; 0x02
    14d0:	a3 82       	std	Z+3, r10	; 0x03
    14d2:	b4 82       	std	Z+4, r11	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	a5 01       	movw	r20, r10
    14da:	94 01       	movw	r18, r8
    14dc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__subsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	f8 01       	movw	r30, r16
    14e6:	85 83       	std	Z+5, r24	; 0x05
    14e8:	96 83       	std	Z+6, r25	; 0x06
    14ea:	a7 83       	std	Z+7, r26	; 0x07
    14ec:	b0 87       	std	Z+8, r27	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	9f e3       	ldi	r25, 0x3F	; 63
    14f6:	a7 01       	movw	r20, r14
    14f8:	96 01       	movw	r18, r12
    14fa:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	f8 01       	movw	r30, r16
    1504:	85 87       	std	Z+13, r24	; 0x0d
    1506:	96 87       	std	Z+14, r25	; 0x0e
    1508:	a7 87       	std	Z+15, r26	; 0x0f
    150a:	b0 8b       	std	Z+16, r27	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
    150c:	c5 01       	movw	r24, r10
    150e:	b4 01       	movw	r22, r8
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	48 ec       	ldi	r20, 0xC8	; 200
    1516:	52 e4       	ldi	r21, 0x42	; 66
    1518:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    151c:	a7 01       	movw	r20, r14
    151e:	96 01       	movw	r18, r12
    1520:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1524:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1528:	f8 01       	movw	r30, r16
    152a:	60 83       	st	Z, r22
}
    152c:	28 96       	adiw	r28, 0x08	; 8
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	08 95       	ret

00001552 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, float32 Scale_ms) {
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	ec 97       	sbiw	r28, 0x3c	; 60
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	5c 01       	movw	r10, r24
    1578:	6a 01       	movw	r12, r20
    157a:	7b 01       	movw	r14, r22
	GLCD_ClearDisplay();
    157c:	0e 94 ac 05 	call	0xb58	; 0xb58 <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
    1586:	fe 01       	movw	r30, r28
    1588:	31 96       	adiw	r30, 0x01	; 1
    158a:	a5 e9       	ldi	r26, 0x95	; 149
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	0d 90       	ld	r0, X+
    1592:	01 92       	st	Z+, r0
    1594:	81 50       	subi	r24, 0x01	; 1
    1596:	e1 f7       	brne	.-8      	; 0x1590 <PWMDrawer_DrawSignal+0x3e>
    1598:	fe 01       	movw	r30, r28
    159a:	3d 96       	adiw	r30, 0x0d	; 13
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	df 01       	movw	r26, r30
    15a0:	1d 92       	st	X+, r1
    15a2:	8a 95       	dec	r24
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <PWMDrawer_DrawSignal+0x4e>
	GLCD_DisplayString(txt1);
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
    15ae:	f5 01       	movw	r30, r10
    15b0:	65 85       	ldd	r22, Z+13	; 0x0d
    15b2:	76 85       	ldd	r23, Z+14	; 0x0e
    15b4:	87 85       	ldd	r24, Z+15	; 0x0f
    15b6:	90 89       	ldd	r25, Z+16	; 0x10
    15b8:	0e 94 35 05 	call	0xa6a	; 0xa6a <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
    15bc:	fe 01       	movw	r30, r28
    15be:	70 96       	adiw	r30, 0x10	; 16
    15c0:	a4 ea       	ldi	r26, 0xA4	; 164
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	85 e0       	ldi	r24, 0x05	; 5
    15c6:	0d 90       	ld	r0, X+
    15c8:	01 92       	st	Z+, r0
    15ca:	81 50       	subi	r24, 0x01	; 1
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <PWMDrawer_DrawSignal+0x74>
	GLCD_DisplayString(txt2);
    15ce:	ce 01       	movw	r24, r28
    15d0:	40 96       	adiw	r24, 0x10	; 16
    15d2:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>

	GLCD_GoToLine(1);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
    15dc:	fe 01       	movw	r30, r28
    15de:	75 96       	adiw	r30, 0x15	; 21
    15e0:	aa ea       	ldi	r26, 0xAA	; 170
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	0d 90       	ld	r0, X+
    15e8:	01 92       	st	Z+, r0
    15ea:	81 50       	subi	r24, 0x01	; 1
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <PWMDrawer_DrawSignal+0x94>
    15ee:	fe 01       	movw	r30, r28
    15f0:	7c 96       	adiw	r30, 0x1c	; 28
    15f2:	88 e0       	ldi	r24, 0x08	; 8
    15f4:	df 01       	movw	r26, r30
    15f6:	1d 92       	st	X+, r1
    15f8:	8a 95       	dec	r24
    15fa:	e9 f7       	brne	.-6      	; 0x15f6 <PWMDrawer_DrawSignal+0xa4>
	GLCD_DisplayString(txt3);
    15fc:	ce 01       	movw	r24, r28
    15fe:	45 96       	adiw	r24, 0x15	; 21
    1600:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
    1604:	f5 01       	movw	r30, r10
    1606:	60 81       	ld	r22, Z
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 c9 04 	call	0x992	; 0x992 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
    1612:	80 91 b9 00 	lds	r24, 0x00B9
    1616:	90 91 ba 00 	lds	r25, 0x00BA
    161a:	a0 91 bb 00 	lds	r26, 0x00BB
    161e:	b0 91 bc 00 	lds	r27, 0x00BC
    1622:	8c a3       	lds	r24, 0x5c
    1624:	9d a3       	lds	r25, 0x5d
    1626:	ae a3       	lds	r26, 0x5e
    1628:	bf a3       	lds	r27, 0x5f
    162a:	18 a6       	lds	r17, 0xb8
	GLCD_DisplayString(txt4);
    162c:	ce 01       	movw	r24, r28
    162e:	84 96       	adiw	r24, 0x24	; 36
    1630:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
	uint8 pixel_width_count = 0;
    163a:	00 e0       	ldi	r16, 0x00	; 0
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
    163c:	20 e4       	ldi	r18, 0x40	; 64
    163e:	30 e4       	ldi	r19, 0x40	; 64
    1640:	4e e7       	ldi	r20, 0x7E	; 126
    1642:	52 e0       	ldi	r21, 0x02	; 2
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
    1650:	0b 5f       	subi	r16, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1652:	d5 01       	movw	r26, r10
    1654:	11 96       	adiw	r26, 0x01	; 1
    1656:	6d 91       	ld	r22, X+
    1658:	7d 91       	ld	r23, X+
    165a:	8d 91       	ld	r24, X+
    165c:	9c 91       	ld	r25, X
    165e:	14 97       	sbiw	r26, 0x04	; 4
    1660:	a7 01       	movw	r20, r14
    1662:	96 01       	movw	r18, r12
    1664:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1668:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    166c:	66 23       	and	r22, r22
    166e:	d1 f0       	breq	.+52     	; 0x16a4 <PWMDrawer_DrawSignal+0x152>
    1670:	10 e0       	ldi	r17, 0x00	; 0
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
    1672:	22 e0       	ldi	r18, 0x02	; 2
    1674:	32 e0       	ldi	r19, 0x02	; 2
    1676:	42 e0       	ldi	r20, 0x02	; 2
    1678:	52 e0       	ldi	r21, 0x02	; 2
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
    1686:	0b 5f       	subi	r16, 0xFB	; 251
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1688:	1f 5f       	subi	r17, 0xFF	; 255
    168a:	f5 01       	movw	r30, r10
    168c:	61 81       	ldd	r22, Z+1	; 0x01
    168e:	72 81       	ldd	r23, Z+2	; 0x02
    1690:	83 81       	ldd	r24, Z+3	; 0x03
    1692:	94 81       	ldd	r25, Z+4	; 0x04
    1694:	a7 01       	movw	r20, r14
    1696:	96 01       	movw	r18, r12
    1698:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    169c:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    16a0:	16 17       	cp	r17, r22
    16a2:	38 f3       	brcs	.-50     	; 0x1672 <PWMDrawer_DrawSignal+0x120>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
    16a4:	22 e0       	ldi	r18, 0x02	; 2
    16a6:	32 e0       	ldi	r19, 0x02	; 2
    16a8:	4e e7       	ldi	r20, 0x7E	; 126
    16aa:	50 e4       	ldi	r21, 0x40	; 64
    16ac:	60 e4       	ldi	r22, 0x40	; 64
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
    16b8:	0b 5f       	subi	r16, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    16ba:	d5 01       	movw	r26, r10
    16bc:	15 96       	adiw	r26, 0x05	; 5
    16be:	6d 91       	ld	r22, X+
    16c0:	7d 91       	ld	r23, X+
    16c2:	8d 91       	ld	r24, X+
    16c4:	9c 91       	ld	r25, X
    16c6:	18 97       	sbiw	r26, 0x08	; 8
    16c8:	a7 01       	movw	r20, r14
    16ca:	96 01       	movw	r18, r12
    16cc:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    16d0:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    16d4:	66 23       	and	r22, r22
    16d6:	d1 f0       	breq	.+52     	; 0x170c <PWMDrawer_DrawSignal+0x1ba>
    16d8:	10 e0       	ldi	r17, 0x00	; 0
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
    16da:	20 e4       	ldi	r18, 0x40	; 64
    16dc:	30 e4       	ldi	r19, 0x40	; 64
    16de:	40 e4       	ldi	r20, 0x40	; 64
    16e0:	50 e4       	ldi	r21, 0x40	; 64
    16e2:	60 e4       	ldi	r22, 0x40	; 64
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
    16ee:	0b 5f       	subi	r16, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    16f0:	1f 5f       	subi	r17, 0xFF	; 255
    16f2:	f5 01       	movw	r30, r10
    16f4:	65 81       	ldd	r22, Z+5	; 0x05
    16f6:	76 81       	ldd	r23, Z+6	; 0x06
    16f8:	87 81       	ldd	r24, Z+7	; 0x07
    16fa:	90 85       	ldd	r25, Z+8	; 0x08
    16fc:	a7 01       	movw	r20, r14
    16fe:	96 01       	movw	r18, r12
    1700:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1704:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1708:	16 17       	cp	r17, r22
    170a:	38 f3       	brcs	.-50     	; 0x16da <PWMDrawer_DrawSignal+0x188>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
    170c:	08 37       	cpi	r16, 0x78	; 120
    170e:	08 f4       	brcc	.+2      	; 0x1712 <PWMDrawer_DrawSignal+0x1c0>
    1710:	95 cf       	rjmp	.-214    	; 0x163c <PWMDrawer_DrawSignal+0xea>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	3e e3       	ldi	r19, 0x3E	; 62
    171c:	48 e0       	ldi	r20, 0x08	; 8
    171e:	5c e1       	ldi	r21, 0x1C	; 28
    1720:	6a e2       	ldi	r22, 0x2A	; 42
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    172c:	d5 01       	movw	r26, r10
    172e:	11 96       	adiw	r26, 0x01	; 1
    1730:	6d 91       	ld	r22, X+
    1732:	7d 91       	ld	r23, X+
    1734:	8d 91       	ld	r24, X+
    1736:	9c 91       	ld	r25, X
    1738:	14 97       	sbiw	r26, 0x04	; 4
    173a:	a7 01       	movw	r20, r14
    173c:	96 01       	movw	r18, r12
    173e:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1742:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1746:	66 23       	and	r22, r22
    1748:	c9 f0       	breq	.+50     	; 0x177c <PWMDrawer_DrawSignal+0x22a>
    174a:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    174c:	28 e0       	ldi	r18, 0x08	; 8
    174e:	38 e0       	ldi	r19, 0x08	; 8
    1750:	48 e0       	ldi	r20, 0x08	; 8
    1752:	58 e0       	ldi	r21, 0x08	; 8
    1754:	68 e0       	ldi	r22, 0x08	; 8
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
    1760:	1f 5f       	subi	r17, 0xFF	; 255
    1762:	f5 01       	movw	r30, r10
    1764:	61 81       	ldd	r22, Z+1	; 0x01
    1766:	72 81       	ldd	r23, Z+2	; 0x02
    1768:	83 81       	ldd	r24, Z+3	; 0x03
    176a:	94 81       	ldd	r25, Z+4	; 0x04
    176c:	a7 01       	movw	r20, r14
    176e:	96 01       	movw	r18, r12
    1770:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1774:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1778:	16 17       	cp	r17, r22
    177a:	40 f3       	brcs	.-48     	; 0x174c <PWMDrawer_DrawSignal+0x1fa>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    177c:	28 e0       	ldi	r18, 0x08	; 8
    177e:	38 e0       	ldi	r19, 0x08	; 8
    1780:	48 e0       	ldi	r20, 0x08	; 8
    1782:	58 e0       	ldi	r21, 0x08	; 8
    1784:	68 e0       	ldi	r22, 0x08	; 8
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    1790:	d5 01       	movw	r26, r10
    1792:	15 96       	adiw	r26, 0x05	; 5
    1794:	6d 91       	ld	r22, X+
    1796:	7d 91       	ld	r23, X+
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	18 97       	sbiw	r26, 0x08	; 8
    179e:	a7 01       	movw	r20, r14
    17a0:	96 01       	movw	r18, r12
    17a2:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    17a6:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    17aa:	66 23       	and	r22, r22
    17ac:	c9 f0       	breq	.+50     	; 0x17e0 <PWMDrawer_DrawSignal+0x28e>
    17ae:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
    17b0:	28 e0       	ldi	r18, 0x08	; 8
    17b2:	38 e0       	ldi	r19, 0x08	; 8
    17b4:	48 e0       	ldi	r20, 0x08	; 8
    17b6:	58 e0       	ldi	r21, 0x08	; 8
    17b8:	68 e0       	ldi	r22, 0x08	; 8
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
    17c4:	1f 5f       	subi	r17, 0xFF	; 255
    17c6:	f5 01       	movw	r30, r10
    17c8:	65 81       	ldd	r22, Z+5	; 0x05
    17ca:	76 81       	ldd	r23, Z+6	; 0x06
    17cc:	87 81       	ldd	r24, Z+7	; 0x07
    17ce:	90 85       	ldd	r25, Z+8	; 0x08
    17d0:	a7 01       	movw	r20, r14
    17d2:	96 01       	movw	r18, r12
    17d4:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    17d8:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    17dc:	16 17       	cp	r17, r22
    17de:	40 f3       	brcs	.-48     	; 0x17b0 <PWMDrawer_DrawSignal+0x25e>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
    17e0:	2a e2       	ldi	r18, 0x2A	; 42
    17e2:	3c e1       	ldi	r19, 0x1C	; 28
    17e4:	48 e0       	ldi	r20, 0x08	; 8
    17e6:	5e e3       	ldi	r21, 0x3E	; 62
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
    17f4:	84 e0       	ldi	r24, 0x04	; 4
    17f6:	0e 94 98 05 	call	0xb30	; 0xb30 <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
    17fa:	de 01       	movw	r26, r28
    17fc:	99 96       	adiw	r26, 0x29	; 41
    17fe:	ee eb       	ldi	r30, 0xBE	; 190
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	01 90       	ld	r0, Z+
    1806:	0d 92       	st	X+, r0
    1808:	81 50       	subi	r24, 0x01	; 1
    180a:	e1 f7       	brne	.-8      	; 0x1804 <PWMDrawer_DrawSignal+0x2b2>
    180c:	fe 01       	movw	r30, r28
    180e:	f1 96       	adiw	r30, 0x31	; 49
    1810:	87 e0       	ldi	r24, 0x07	; 7
    1812:	df 01       	movw	r26, r30
    1814:	1d 92       	st	X+, r1
    1816:	8a 95       	dec	r24
    1818:	e9 f7       	brne	.-6      	; 0x1814 <PWMDrawer_DrawSignal+0x2c2>
	GLCD_DisplayString(txt5);
    181a:	ce 01       	movw	r24, r28
    181c:	89 96       	adiw	r24, 0x29	; 41
    181e:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
    1822:	f5 01       	movw	r30, r10
    1824:	61 85       	ldd	r22, Z+9	; 0x09
    1826:	72 85       	ldd	r23, Z+10	; 0x0a
    1828:	83 85       	ldd	r24, Z+11	; 0x0b
    182a:	94 85       	ldd	r25, Z+12	; 0x0c
    182c:	0e 94 35 05 	call	0xa6a	; 0xa6a <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
    1830:	de 01       	movw	r26, r28
    1832:	d8 96       	adiw	r26, 0x38	; 56
    1834:	ed ec       	ldi	r30, 0xCD	; 205
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	01 90       	ld	r0, Z+
    183c:	0d 92       	st	X+, r0
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	e1 f7       	brne	.-8      	; 0x183a <PWMDrawer_DrawSignal+0x2e8>
	GLCD_DisplayString(txt6);
    1842:	ce 01       	movw	r24, r28
    1844:	c8 96       	adiw	r24, 0x38	; 56
    1846:	0e 94 ba 04 	call	0x974	; 0x974 <GLCD_DisplayString>
    184a:	ec 96       	adiw	r28, 0x3c	; 60
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	08 95       	ret

0000186c <GPT_Init>:
static void GPT_InitTimer2(const GPT_ConfigurationType* Config_Ptr);

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void GPT_Init(const GPT_ConfigurationType* Config_Arr_Ptr) {
    186c:	fc 01       	movw	r30, r24
	for (uint8 i = 0; i < NUM_TIMERS_OPERATING; i++, Config_Arr_Ptr++) {
		switch (Config_Arr_Ptr->Tmr_Channel) {
    186e:	80 81       	ld	r24, Z
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	c1 f1       	breq	.+112    	; 0x18e4 <GPT_Init+0x78>
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	20 f0       	brcs	.+8      	; 0x1880 <GPT_Init+0x14>
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	09 f0       	breq	.+2      	; 0x187e <GPT_Init+0x12>
    187c:	8d c0       	rjmp	.+282    	; 0x1998 <GPT_Init+0x12c>
    187e:	67 c0       	rjmp	.+206    	; 0x194e <GPT_Init+0xe2>
	}
}

static void GPT_InitTimer0(const GPT_ConfigurationType* Config_Ptr) {
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
    1880:	13 be       	out	0x33, r1	; 51
	/* Set Mode (Normal or CTC) */
	*TIMER0_CTRL_REG |= (Config_Ptr->Op_Mode);
    1882:	93 b7       	in	r25, 0x33	; 51
    1884:	81 81       	ldd	r24, Z+1	; 0x01
    1886:	89 2b       	or	r24, r25
    1888:	83 bf       	out	0x33, r24	; 51
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	71 f0       	breq	.+28     	; 0x18ac <GPT_Init+0x40>
    1890:	85 30       	cpi	r24, 0x05	; 5
    1892:	18 f4       	brcc	.+6      	; 0x189a <GPT_Init+0x2e>
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	90 f4       	brcc	.+36     	; 0x18bc <GPT_Init+0x50>
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <GPT_Init+0x38>
    189a:	98 2f       	mov	r25, r24
    189c:	96 50       	subi	r25, 0x06	; 6
    189e:	94 30       	cpi	r25, 0x04	; 4
    18a0:	68 f4       	brcc	.+26     	; 0x18bc <GPT_Init+0x50>
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <GPT_Init+0x48>
		case GPT_TIMER_STOP:
		case GPT_PRESCALE_1:
		case GPT_PRESCALE_8:	
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    18a4:	93 b7       	in	r25, 0x33	; 51
    18a6:	89 2b       	or	r24, r25
    18a8:	83 bf       	out	0x33, r24	; 51
    18aa:	08 c0       	rjmp	.+16     	; 0x18bc <GPT_Init+0x50>
		case GPT_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    18ac:	83 b7       	in	r24, 0x33	; 51
    18ae:	83 60       	ori	r24, 0x03	; 3
    18b0:	83 bf       	out	0x33, r24	; 51
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <GPT_Init+0x50>
		case GPT_PRESCALE_256:
		case GPT_PRESCALE_1024:
		case GPT_EXT_CLK_FALLING_EDGE:
		case GPT_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    18b4:	93 b7       	in	r25, 0x33	; 51
    18b6:	82 50       	subi	r24, 0x02	; 2
    18b8:	89 2b       	or	r24, r25
    18ba:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0xFCU);
    18bc:	89 b7       	in	r24, 0x39	; 57
    18be:	8c 7f       	andi	r24, 0xFC	; 252
    18c0:	89 bf       	out	0x39, r24	; 57
	switch (Config_Ptr->Op_Mode) {
    18c2:	81 81       	ldd	r24, Z+1	; 0x01
    18c4:	88 23       	and	r24, r24
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <GPT_Init+0x64>
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	09 f0       	breq	.+2      	; 0x18ce <GPT_Init+0x62>
    18cc:	65 c0       	rjmp	.+202    	; 0x1998 <GPT_Init+0x12c>
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <GPT_Init+0x6c>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    18d0:	99 b7       	in	r25, 0x39	; 57
    18d2:	83 81       	ldd	r24, Z+3	; 0x03
    18d4:	89 2b       	or	r24, r25
    18d6:	89 bf       	out	0x39, r24	; 57
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    18d8:	99 b7       	in	r25, 0x39	; 57
    18da:	83 81       	ldd	r24, Z+3	; 0x03
    18dc:	88 0f       	add	r24, r24
    18de:	89 2b       	or	r24, r25
    18e0:	89 bf       	out	0x39, r24	; 57
    18e2:	08 95       	ret
	}
}

static void GPT_InitTimer1(const GPT_ConfigurationType* Config_Ptr) {
	/* Clear TCCR1A and TCCR1B Register Configurations */
	*TIMER1_CTRL_REG_A = 0x00U;
    18e4:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
    18e6:	1e bc       	out	0x2e, r1	; 46
	/* Set Mode (Normal or CTC) */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Op_Mode);
    18e8:	9e b5       	in	r25, 0x2e	; 46
    18ea:	81 81       	ldd	r24, Z+1	; 0x01
    18ec:	89 2b       	or	r24, r25
    18ee:	8e bd       	out	0x2e, r24	; 46
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	71 f0       	breq	.+28     	; 0x1912 <GPT_Init+0xa6>
    18f6:	85 30       	cpi	r24, 0x05	; 5
    18f8:	18 f4       	brcc	.+6      	; 0x1900 <GPT_Init+0x94>
    18fa:	83 30       	cpi	r24, 0x03	; 3
    18fc:	90 f4       	brcc	.+36     	; 0x1922 <GPT_Init+0xb6>
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <GPT_Init+0x9e>
    1900:	98 2f       	mov	r25, r24
    1902:	96 50       	subi	r25, 0x06	; 6
    1904:	94 30       	cpi	r25, 0x04	; 4
    1906:	68 f4       	brcc	.+26     	; 0x1922 <GPT_Init+0xb6>
    1908:	08 c0       	rjmp	.+16     	; 0x191a <GPT_Init+0xae>
		case GPT_TIMER_STOP:
		case GPT_PRESCALE_1:
		case GPT_PRESCALE_8:
			*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale); break;
    190a:	9e b5       	in	r25, 0x2e	; 46
    190c:	89 2b       	or	r24, r25
    190e:	8e bd       	out	0x2e, r24	; 46
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <GPT_Init+0xb6>
		case GPT_PRESCALE_64:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-1U); break;
    1912:	8e b5       	in	r24, 0x2e	; 46
    1914:	83 60       	ori	r24, 0x03	; 3
    1916:	8e bd       	out	0x2e, r24	; 46
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <GPT_Init+0xb6>
		case GPT_PRESCALE_256:
		case GPT_PRESCALE_1024:
		case GPT_EXT_CLK_FALLING_EDGE:
		case GPT_EXT_CLK_RISING_EDGE:
			*TIMER1_CTRL_REG_B |= ((Config_Ptr->Clk_Prescale)-2U); break;
    191a:	9e b5       	in	r25, 0x2e	; 46
    191c:	82 50       	subi	r24, 0x02	; 2
    191e:	89 2b       	or	r24, r25
    1920:	8e bd       	out	0x2e, r24	; 46
		default: break;
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0xE3U);
    1922:	89 b7       	in	r24, 0x39	; 57
    1924:	83 7e       	andi	r24, 0xE3	; 227
    1926:	89 bf       	out	0x39, r24	; 57
	switch (Config_Ptr->Op_Mode) {
    1928:	81 81       	ldd	r24, Z+1	; 0x01
    192a:	88 23       	and	r24, r24
    192c:	19 f0       	breq	.+6      	; 0x1934 <GPT_Init+0xc8>
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	99 f5       	brne	.+102    	; 0x1998 <GPT_Init+0x12c>
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <GPT_Init+0xd4>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    1934:	99 b7       	in	r25, 0x39	; 57
    1936:	83 81       	ldd	r24, Z+3	; 0x03
    1938:	88 0f       	add	r24, r24
    193a:	88 0f       	add	r24, r24
    193c:	89 2b       	or	r24, r25
    193e:	89 bf       	out	0x39, r24	; 57
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    1940:	99 b7       	in	r25, 0x39	; 57
    1942:	83 81       	ldd	r24, Z+3	; 0x03
    1944:	82 95       	swap	r24
    1946:	80 7f       	andi	r24, 0xF0	; 240
    1948:	89 2b       	or	r24, r25
    194a:	89 bf       	out	0x39, r24	; 57
    194c:	08 95       	ret
	}
}

static void GPT_InitTimer2(const GPT_ConfigurationType* Config_Ptr) {
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
    194e:	15 bc       	out	0x25, r1	; 37
	/* Set Mode (Normal or CTC) */
	*TIMER2_CTRL_REG |= (Config_Ptr->Op_Mode);
    1950:	95 b5       	in	r25, 0x25	; 37
    1952:	81 81       	ldd	r24, Z+1	; 0x01
    1954:	89 2b       	or	r24, r25
    1956:	85 bd       	out	0x25, r24	; 37
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != GPT_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != GPT_EXT_CLK_RISING_EDGE) {
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	98 2f       	mov	r25, r24
    195c:	98 50       	subi	r25, 0x08	; 8
    195e:	92 30       	cpi	r25, 0x02	; 2
    1960:	18 f0       	brcs	.+6      	; 0x1968 <GPT_Init+0xfc>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
    1962:	95 b5       	in	r25, 0x25	; 37
    1964:	89 2b       	or	r24, r25
    1966:	85 bd       	out	0x25, r24	; 37
	}
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG &= (0x3FU);
    1968:	89 b7       	in	r24, 0x39	; 57
    196a:	8f 73       	andi	r24, 0x3F	; 63
    196c:	89 bf       	out	0x39, r24	; 57
	switch (Config_Ptr->Op_Mode) {
    196e:	81 81       	ldd	r24, Z+1	; 0x01
    1970:	88 23       	and	r24, r24
    1972:	19 f0       	breq	.+6      	; 0x197a <GPT_Init+0x10e>
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	81 f4       	brne	.+32     	; 0x1998 <GPT_Init+0x12c>
    1978:	08 c0       	rjmp	.+16     	; 0x198a <GPT_Init+0x11e>
		case GPT_NORMAL_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    197a:	99 b7       	in	r25, 0x39	; 57
    197c:	83 81       	ldd	r24, Z+3	; 0x03
    197e:	82 95       	swap	r24
    1980:	88 0f       	add	r24, r24
    1982:	88 0f       	add	r24, r24
    1984:	80 7c       	andi	r24, 0xC0	; 192
    1986:	89 2b       	or	r24, r25
    1988:	89 bf       	out	0x39, r24	; 57
		case GPT_CTC_MODE: *TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    198a:	99 b7       	in	r25, 0x39	; 57
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	87 95       	ror	r24
    1990:	88 27       	eor	r24, r24
    1992:	87 95       	ror	r24
    1994:	89 2b       	or	r24, r25
    1996:	89 bf       	out	0x39, r24	; 57
    1998:	08 95       	ret

0000199a <GPT_Delay_us>:
		default: break;
	}
}

void GPT_Delay_us(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_us) {
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
	// Delay_Time_us = 10^6 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
	switch (Config_Ptr->Clk_Prescale) {
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	84 30       	cpi	r24, 0x04	; 4
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <GPT_Delay_us+0xe>
    19a6:	4d c0       	rjmp	.+154    	; 0x1a42 <GPT_Delay_us+0xa8>
    19a8:	85 30       	cpi	r24, 0x05	; 5
    19aa:	40 f4       	brcc	.+16     	; 0x19bc <GPT_Delay_us+0x22>
    19ac:	82 30       	cpi	r24, 0x02	; 2
    19ae:	19 f1       	breq	.+70     	; 0x19f6 <GPT_Delay_us+0x5c>
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	a0 f5       	brcc	.+104    	; 0x1a1c <GPT_Delay_us+0x82>
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	09 f0       	breq	.+2      	; 0x19ba <GPT_Delay_us+0x20>
    19b8:	90 c0       	rjmp	.+288    	; 0x1ada <GPT_Delay_us+0x140>
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <GPT_Delay_us+0x36>
    19bc:	86 30       	cpi	r24, 0x06	; 6
    19be:	09 f4       	brne	.+2      	; 0x19c2 <GPT_Delay_us+0x28>
    19c0:	66 c0       	rjmp	.+204    	; 0x1a8e <GPT_Delay_us+0xf4>
    19c2:	86 30       	cpi	r24, 0x06	; 6
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <GPT_Delay_us+0x2e>
    19c6:	50 c0       	rjmp	.+160    	; 0x1a68 <GPT_Delay_us+0xce>
    19c8:	87 30       	cpi	r24, 0x07	; 7
    19ca:	09 f0       	breq	.+2      	; 0x19ce <GPT_Delay_us+0x34>
    19cc:	86 c0       	rjmp	.+268    	; 0x1ada <GPT_Delay_us+0x140>
    19ce:	72 c0       	rjmp	.+228    	; 0x1ab4 <GPT_Delay_us+0x11a>
		case GPT_PRESCALE_1:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (1.0 * 1000000UL)); break;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	34 e2       	ldi	r19, 0x24	; 36
    19d8:	44 ef       	ldi	r20, 0xF4	; 244
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    19e0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	34 e2       	ldi	r19, 0x24	; 36
    19e8:	44 e7       	ldi	r20, 0x74	; 116
    19ea:	59 e4       	ldi	r21, 0x49	; 73
    19ec:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    19f0:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    19f4:	74 c0       	rjmp	.+232    	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_8:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (8.0 * 1000000UL)); break;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	34 e2       	ldi	r19, 0x24	; 36
    19fe:	44 ef       	ldi	r20, 0xF4	; 244
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1a06:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	34 e2       	ldi	r19, 0x24	; 36
    1a0e:	44 ef       	ldi	r20, 0xF4	; 244
    1a10:	5a e4       	ldi	r21, 0x4A	; 74
    1a12:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1a16:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1a1a:	61 c0       	rjmp	.+194    	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_32:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (32.0 * 1000000UL)); break;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	34 e2       	ldi	r19, 0x24	; 36
    1a24:	44 ef       	ldi	r20, 0xF4	; 244
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1a2c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	34 e2       	ldi	r19, 0x24	; 36
    1a34:	44 ef       	ldi	r20, 0xF4	; 244
    1a36:	5b e4       	ldi	r21, 0x4B	; 75
    1a38:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1a3c:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1a40:	4e c0       	rjmp	.+156    	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_64:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (64.0 * 1000000UL)); break;
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	34 e2       	ldi	r19, 0x24	; 36
    1a4a:	44 ef       	ldi	r20, 0xF4	; 244
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1a52:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	34 e2       	ldi	r19, 0x24	; 36
    1a5a:	44 e7       	ldi	r20, 0x74	; 116
    1a5c:	5c e4       	ldi	r21, 0x4C	; 76
    1a5e:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1a62:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1a66:	3b c0       	rjmp	.+118    	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (128.0 * 1000000UL)); break;
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	34 e2       	ldi	r19, 0x24	; 36
    1a70:	44 ef       	ldi	r20, 0xF4	; 244
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1a78:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	34 e2       	ldi	r19, 0x24	; 36
    1a80:	44 ef       	ldi	r20, 0xF4	; 244
    1a82:	5c e4       	ldi	r21, 0x4C	; 76
    1a84:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1a88:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1a8c:	28 c0       	rjmp	.+80     	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (256.0 * 1000000UL)); break;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	34 e2       	ldi	r19, 0x24	; 36
    1a96:	44 ef       	ldi	r20, 0xF4	; 244
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1a9e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	34 e2       	ldi	r19, 0x24	; 36
    1aa6:	44 e7       	ldi	r20, 0x74	; 116
    1aa8:	5d e4       	ldi	r21, 0x4D	; 77
    1aaa:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1aae:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1ab2:	15 c0       	rjmp	.+42     	; 0x1ade <GPT_Delay_us+0x144>
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (1024.0 * 1000000UL)); break;
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	34 e2       	ldi	r19, 0x24	; 36
    1abc:	44 ef       	ldi	r20, 0xF4	; 244
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1ac4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	34 e2       	ldi	r19, 0x24	; 36
    1acc:	44 e7       	ldi	r20, 0x74	; 116
    1ace:	5e e4       	ldi	r21, 0x4E	; 78
    1ad0:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1ad4:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPT_Delay_us+0x144>
	}
}

void GPT_Delay_us(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_us) {
	// Delay_Time_us = 10^6 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	70 e0       	ldi	r23, 0x00	; 0
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (128.0 * 1000000UL)); break;
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (256.0 * 1000000UL)); break;
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_us * F_CPU / (1024.0 * 1000000UL)); break;
		default:break;
	}
	switch (Config_Ptr->Tmr_Channel) {
    1ade:	88 81       	ld	r24, Y
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <GPT_Delay_us+0x19e>
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <GPT_Delay_us+0x156>
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	09 f0       	breq	.+2      	; 0x1aee <GPT_Delay_us+0x154>
    1aec:	89 c0       	rjmp	.+274    	; 0x1c00 <GPT_Delay_us+0x266>
    1aee:	60 c0       	rjmp	.+192    	; 0x1bb0 <GPT_Delay_us+0x216>
		case GPT_TIMER_0:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xFCU);
    1af0:	89 b7       	in	r24, 0x39	; 57
    1af2:	8c 7f       	andi	r24, 0xFC	; 252
    1af4:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	88 23       	and	r24, r24
    1afa:	89 f0       	breq	.+34     	; 0x1b1e <GPT_Delay_us+0x184>
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <GPT_Delay_us+0x168>
    1b00:	7f c0       	rjmp	.+254    	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_CTC_MODE:
				*TIMER0_CMP_REG = (uint8)Tmr_Counts;
    1b02:	6c bf       	out	0x3c, r22	; 60
				*TIMER0_CNTR_REG = 0x00U;
    1b04:	12 be       	out	0x32, r1	; 50
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT) == 0) ;
    1b06:	88 b7       	in	r24, 0x38	; 56
    1b08:	81 ff       	sbrs	r24, 1
    1b0a:	fd cf       	rjmp	.-6      	; 0x1b06 <GPT_Delay_us+0x16c>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    1b0c:	88 b7       	in	r24, 0x38	; 56
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    1b12:	99 b7       	in	r25, 0x39	; 57
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	88 0f       	add	r24, r24
    1b18:	89 2b       	or	r24, r25
    1b1a:	89 bf       	out	0x39, r24	; 57
				return;
    1b1c:	71 c0       	rjmp	.+226    	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_NORMAL_MODE:
				*TIMER0_CNTR_REG = 256-(uint8)(Tmr_Counts);
    1b1e:	61 95       	neg	r22
    1b20:	62 bf       	out	0x32, r22	; 50
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT) == 0) ;
    1b22:	08 b6       	in	r0, 0x38	; 56
    1b24:	00 fe       	sbrs	r0, 0
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <GPT_Delay_us+0x188>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    1b28:	88 b7       	in	r24, 0x38	; 56
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    1b2e:	99 b7       	in	r25, 0x39	; 57
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	89 2b       	or	r24, r25
    1b34:	89 bf       	out	0x39, r24	; 57
				return;
    1b36:	64 c0       	rjmp	.+200    	; 0x1c00 <GPT_Delay_us+0x266>
			default:break;
		}
		break;
		case GPT_TIMER_1:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xC3U);
    1b38:	89 b7       	in	r24, 0x39	; 57
    1b3a:	83 7c       	andi	r24, 0xC3	; 195
    1b3c:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	88 23       	and	r24, r24
    1b42:	a1 f0       	breq	.+40     	; 0x1b6c <GPT_Delay_us+0x1d2>
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <GPT_Delay_us+0x1b0>
    1b48:	5b c0       	rjmp	.+182    	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_CTC_MODE:
				*TIMER1_CMP_A_REG_L = (uint8)(Tmr_Counts & 0x00FFU);
    1b4a:	6a bd       	out	0x2a, r22	; 42
				*TIMER1_CMP_A_REG_H = (uint8)((Tmr_Counts & 0xFF00U)>>8);
    1b4c:	7b bd       	out	0x2b, r23	; 43
				*TIMER1_CNTR_REG_L = 0x00U;
    1b4e:	1c bc       	out	0x2c, r1	; 44
				*TIMER1_CNTR_REG_H = 0x00U;
    1b50:	1d bc       	out	0x2d, r1	; 45
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT) == 0) ;
    1b52:	88 b7       	in	r24, 0x38	; 56
    1b54:	84 ff       	sbrs	r24, 4
    1b56:	fd cf       	rjmp	.-6      	; 0x1b52 <GPT_Delay_us+0x1b8>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    1b58:	88 b7       	in	r24, 0x38	; 56
    1b5a:	80 61       	ori	r24, 0x10	; 16
    1b5c:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    1b5e:	99 b7       	in	r25, 0x39	; 57
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	82 95       	swap	r24
    1b64:	80 7f       	andi	r24, 0xF0	; 240
    1b66:	89 2b       	or	r24, r25
    1b68:	89 bf       	out	0x39, r24	; 57
				return;
    1b6a:	4a c0       	rjmp	.+148    	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_NORMAL_MODE:
				*TIMER1_CNTR_REG_L = (uint8)((65535-Tmr_Counts) & 0x00FFU);
    1b6c:	86 2f       	mov	r24, r22
    1b6e:	80 95       	com	r24
    1b70:	8c bd       	out	0x2c, r24	; 44
				*TIMER1_CNTR_REG_H = (uint8)((65535-Tmr_Counts)>>8);
    1b72:	ab 01       	movw	r20, r22
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	84 1b       	sub	r24, r20
    1b82:	95 0b       	sbc	r25, r21
    1b84:	a6 0b       	sbc	r26, r22
    1b86:	b7 0b       	sbc	r27, r23
    1b88:	89 2f       	mov	r24, r25
    1b8a:	9a 2f       	mov	r25, r26
    1b8c:	ab 2f       	mov	r26, r27
    1b8e:	bb 27       	eor	r27, r27
    1b90:	a7 fd       	sbrc	r26, 7
    1b92:	ba 95       	dec	r27
    1b94:	8d bd       	out	0x2d, r24	; 45
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT) == 0) ;
    1b96:	88 b7       	in	r24, 0x38	; 56
    1b98:	82 ff       	sbrs	r24, 2
    1b9a:	fd cf       	rjmp	.-6      	; 0x1b96 <GPT_Delay_us+0x1fc>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    1b9c:	88 b7       	in	r24, 0x38	; 56
    1b9e:	84 60       	ori	r24, 0x04	; 4
    1ba0:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    1ba2:	99 b7       	in	r25, 0x39	; 57
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 0f       	add	r24, r24
    1ba8:	88 0f       	add	r24, r24
    1baa:	89 2b       	or	r24, r25
    1bac:	89 bf       	out	0x39, r24	; 57
				return;
    1bae:	28 c0       	rjmp	.+80     	; 0x1c00 <GPT_Delay_us+0x266>
			default:break;
		}
		break;
		case GPT_TIMER_2:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0x3FU);
    1bb0:	89 b7       	in	r24, 0x39	; 57
    1bb2:	8f 73       	andi	r24, 0x3F	; 63
    1bb4:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	88 23       	and	r24, r24
    1bba:	91 f0       	breq	.+36     	; 0x1be0 <GPT_Delay_us+0x246>
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	01 f5       	brne	.+64     	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_CTC_MODE:
				*TIMER2_CMP_REG = (uint8)Tmr_Counts;
    1bc0:	63 bd       	out	0x23, r22	; 35
				*TIMER2_CNTR_REG = 0x00U;
    1bc2:	14 bc       	out	0x24, r1	; 36
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT) == 0) ;
    1bc4:	08 b6       	in	r0, 0x38	; 56
    1bc6:	07 fe       	sbrs	r0, 7
    1bc8:	fd cf       	rjmp	.-6      	; 0x1bc4 <GPT_Delay_us+0x22a>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    1bca:	88 b7       	in	r24, 0x38	; 56
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    1bd0:	99 b7       	in	r25, 0x39	; 57
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	87 95       	ror	r24
    1bd6:	88 27       	eor	r24, r24
    1bd8:	87 95       	ror	r24
    1bda:	89 2b       	or	r24, r25
    1bdc:	89 bf       	out	0x39, r24	; 57
				return;
    1bde:	10 c0       	rjmp	.+32     	; 0x1c00 <GPT_Delay_us+0x266>
			case GPT_NORMAL_MODE:
				*TIMER2_CNTR_REG = 256-(uint8)(Tmr_Counts);
    1be0:	61 95       	neg	r22
    1be2:	64 bd       	out	0x24, r22	; 36
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT) == 0) ;
    1be4:	88 b7       	in	r24, 0x38	; 56
    1be6:	86 ff       	sbrs	r24, 6
    1be8:	fd cf       	rjmp	.-6      	; 0x1be4 <GPT_Delay_us+0x24a>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    1bea:	88 b7       	in	r24, 0x38	; 56
    1bec:	80 64       	ori	r24, 0x40	; 64
    1bee:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    1bf0:	99 b7       	in	r25, 0x39	; 57
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	82 95       	swap	r24
    1bf6:	88 0f       	add	r24, r24
    1bf8:	88 0f       	add	r24, r24
    1bfa:	80 7c       	andi	r24, 0xC0	; 192
    1bfc:	89 2b       	or	r24, r25
    1bfe:	89 bf       	out	0x39, r24	; 57
			default:break;
		}
		break;
		default: break;
	}
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <GPT_Delay_ms>:

void GPT_Delay_ms(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_ms) {
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	ec 01       	movw	r28, r24
	// Delay_Time_ms = 10^3 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
	switch (Config_Ptr->Clk_Prescale) {
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <GPT_Delay_ms+0xe>
    1c12:	4d c0       	rjmp	.+154    	; 0x1cae <GPT_Delay_ms+0xa8>
    1c14:	85 30       	cpi	r24, 0x05	; 5
    1c16:	40 f4       	brcc	.+16     	; 0x1c28 <GPT_Delay_ms+0x22>
    1c18:	82 30       	cpi	r24, 0x02	; 2
    1c1a:	19 f1       	breq	.+70     	; 0x1c62 <GPT_Delay_ms+0x5c>
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	a0 f5       	brcc	.+104    	; 0x1c88 <GPT_Delay_ms+0x82>
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <GPT_Delay_ms+0x20>
    1c24:	90 c0       	rjmp	.+288    	; 0x1d46 <GPT_Delay_ms+0x140>
    1c26:	0a c0       	rjmp	.+20     	; 0x1c3c <GPT_Delay_ms+0x36>
    1c28:	86 30       	cpi	r24, 0x06	; 6
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <GPT_Delay_ms+0x28>
    1c2c:	66 c0       	rjmp	.+204    	; 0x1cfa <GPT_Delay_ms+0xf4>
    1c2e:	86 30       	cpi	r24, 0x06	; 6
    1c30:	08 f4       	brcc	.+2      	; 0x1c34 <GPT_Delay_ms+0x2e>
    1c32:	50 c0       	rjmp	.+160    	; 0x1cd4 <GPT_Delay_ms+0xce>
    1c34:	87 30       	cpi	r24, 0x07	; 7
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <GPT_Delay_ms+0x34>
    1c38:	86 c0       	rjmp	.+268    	; 0x1d46 <GPT_Delay_ms+0x140>
    1c3a:	72 c0       	rjmp	.+228    	; 0x1d20 <GPT_Delay_ms+0x11a>
		case GPT_PRESCALE_1:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (1.0 * 1000UL)); break;
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	34 e2       	ldi	r19, 0x24	; 36
    1c44:	44 ef       	ldi	r20, 0xF4	; 244
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1c4c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1c5c:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1c60:	74 c0       	rjmp	.+232    	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_8:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (8.0 * 1000UL)); break;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	34 e2       	ldi	r19, 0x24	; 36
    1c6a:	44 ef       	ldi	r20, 0xF4	; 244
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1c72:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	55 e4       	ldi	r21, 0x45	; 69
    1c7e:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1c82:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1c86:	61 c0       	rjmp	.+194    	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_32:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (32.0 * 1000UL)); break;
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	34 e2       	ldi	r19, 0x24	; 36
    1c90:	44 ef       	ldi	r20, 0xF4	; 244
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1c98:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	56 e4       	ldi	r21, 0x46	; 70
    1ca4:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1ca8:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1cac:	4e c0       	rjmp	.+156    	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_64:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (64.0 * 1000UL)); break;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	34 e2       	ldi	r19, 0x24	; 36
    1cb6:	44 ef       	ldi	r20, 0xF4	; 244
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1cbe:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1cce:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1cd2:	3b c0       	rjmp	.+118    	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (128.0 * 1000UL)); break;
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	34 e2       	ldi	r19, 0x24	; 36
    1cdc:	44 ef       	ldi	r20, 0xF4	; 244
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1ce4:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1cf4:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1cf8:	28 c0       	rjmp	.+80     	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (256.0 * 1000UL)); break;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	34 e2       	ldi	r19, 0x24	; 36
    1d02:	44 ef       	ldi	r20, 0xF4	; 244
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1d0a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	58 e4       	ldi	r21, 0x48	; 72
    1d16:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1d1a:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1d1e:	15 c0       	rjmp	.+42     	; 0x1d4a <GPT_Delay_ms+0x144>
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (1024.0 * 1000UL)); break;
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	34 e2       	ldi	r19, 0x24	; 36
    1d28:	44 ef       	ldi	r20, 0xF4	; 244
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	0e 94 ca 11 	call	0x2394	; 0x2394 <__mulsi3>
    1d30:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__floatunsisf>
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a e7       	ldi	r20, 0x7A	; 122
    1d3a:	59 e4       	ldi	r21, 0x49	; 73
    1d3c:	0e 94 45 10 	call	0x208a	; 0x208a <__divsf3>
    1d40:	0e 94 ad 10 	call	0x215a	; 0x215a <__fixunssfsi>
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <GPT_Delay_ms+0x144>
	}
}

void GPT_Delay_ms(const GPT_ConfigurationType* Config_Ptr, uint16 Delay_Time_ms) {
	// Delay_Time_ms = 10^3 * Prescale * Num_Counts / F_CPU
	uint16 Tmr_Counts = 0U;
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
		case GPT_PRESCALE_128:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (128.0 * 1000UL)); break;
		case GPT_PRESCALE_256:	Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (256.0 * 1000UL)); break;
		case GPT_PRESCALE_1024: Tmr_Counts = (uint16)(Delay_Time_ms * F_CPU / (1024.0 * 1000UL)); break;
		default:break;
	}
	switch (Config_Ptr->Tmr_Channel) {
    1d4a:	88 81       	ld	r24, Y
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	51 f1       	breq	.+84     	; 0x1da4 <GPT_Delay_ms+0x19e>
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	20 f0       	brcs	.+8      	; 0x1d5c <GPT_Delay_ms+0x156>
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <GPT_Delay_ms+0x154>
    1d58:	7a c0       	rjmp	.+244    	; 0x1e4e <GPT_Delay_ms+0x248>
    1d5a:	51 c0       	rjmp	.+162    	; 0x1dfe <GPT_Delay_ms+0x1f8>
		case GPT_TIMER_0:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xFCU);
    1d5c:	89 b7       	in	r24, 0x39	; 57
    1d5e:	8c 7f       	andi	r24, 0xFC	; 252
    1d60:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	88 23       	and	r24, r24
    1d66:	89 f0       	breq	.+34     	; 0x1d8a <GPT_Delay_ms+0x184>
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <GPT_Delay_ms+0x168>
    1d6c:	70 c0       	rjmp	.+224    	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_CTC_MODE:
				*TIMER0_CMP_REG = (uint8)Tmr_Counts;
    1d6e:	6c bf       	out	0x3c, r22	; 60
				*TIMER0_CNTR_REG = 0x00U;
    1d70:	12 be       	out	0x32, r1	; 50
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT) == 0) ;
    1d72:	88 b7       	in	r24, 0x38	; 56
    1d74:	81 ff       	sbrs	r24, 1
    1d76:	fd cf       	rjmp	.-6      	; 0x1d72 <GPT_Delay_ms+0x16c>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    1d78:	88 b7       	in	r24, 0x38	; 56
    1d7a:	82 60       	ori	r24, 0x02	; 2
    1d7c:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_CMP_INT_BIT);
    1d7e:	99 b7       	in	r25, 0x39	; 57
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 0f       	add	r24, r24
    1d84:	89 2b       	or	r24, r25
    1d86:	89 bf       	out	0x39, r24	; 57
				return;
    1d88:	62 c0       	rjmp	.+196    	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_NORMAL_MODE:
				*TIMER0_CNTR_REG = 256U-(uint8)(Tmr_Counts);
    1d8a:	61 95       	neg	r22
    1d8c:	62 bf       	out	0x32, r22	; 50
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT) == 0) ;
    1d8e:	08 b6       	in	r0, 0x38	; 56
    1d90:	00 fe       	sbrs	r0, 0
    1d92:	fd cf       	rjmp	.-6      	; 0x1d8e <GPT_Delay_ms+0x188>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    1d94:	88 b7       	in	r24, 0x38	; 56
    1d96:	81 60       	ori	r24, 0x01	; 1
    1d98:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER0_OVF_INT_BIT);
    1d9a:	99 b7       	in	r25, 0x39	; 57
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	89 2b       	or	r24, r25
    1da0:	89 bf       	out	0x39, r24	; 57
				return;
    1da2:	55 c0       	rjmp	.+170    	; 0x1e4e <GPT_Delay_ms+0x248>
			default:break;
		}
		break;
		case GPT_TIMER_1:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0xC3U);
    1da4:	89 b7       	in	r24, 0x39	; 57
    1da6:	83 7c       	andi	r24, 0xC3	; 195
    1da8:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	88 23       	and	r24, r24
    1dae:	a1 f0       	breq	.+40     	; 0x1dd8 <GPT_Delay_ms+0x1d2>
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <GPT_Delay_ms+0x1b0>
    1db4:	4c c0       	rjmp	.+152    	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_CTC_MODE:
				*TIMER1_CMP_A_REG_H = (uint8)(Tmr_Counts>>8U);
    1db6:	7b bd       	out	0x2b, r23	; 43
				*TIMER1_CMP_A_REG_L = (uint8)(Tmr_Counts & 0x00FFU);
    1db8:	6a bd       	out	0x2a, r22	; 42
				*TIMER1_CNTR_REG_H = 0x00U;
    1dba:	1d bc       	out	0x2d, r1	; 45
				*TIMER1_CNTR_REG_L = 0x00U;
    1dbc:	1c bc       	out	0x2c, r1	; 44
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT) == 0) ;
    1dbe:	88 b7       	in	r24, 0x38	; 56
    1dc0:	84 ff       	sbrs	r24, 4
    1dc2:	fd cf       	rjmp	.-6      	; 0x1dbe <GPT_Delay_ms+0x1b8>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    1dc4:	88 b7       	in	r24, 0x38	; 56
    1dc6:	80 61       	ori	r24, 0x10	; 16
    1dc8:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_CMP_A_INT_BIT);
    1dca:	99 b7       	in	r25, 0x39	; 57
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	82 95       	swap	r24
    1dd0:	80 7f       	andi	r24, 0xF0	; 240
    1dd2:	89 2b       	or	r24, r25
    1dd4:	89 bf       	out	0x39, r24	; 57
				return;
    1dd6:	3b c0       	rjmp	.+118    	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_NORMAL_MODE:
				*TIMER1_CNTR_REG_L = (uint8)((65535U-Tmr_Counts) & 0x00FFU);
    1dd8:	86 2f       	mov	r24, r22
    1dda:	80 95       	com	r24
    1ddc:	8c bd       	out	0x2c, r24	; 44
				*TIMER1_CNTR_REG_H = (uint8)((65535U-Tmr_Counts)>>8U);
    1dde:	60 95       	com	r22
    1de0:	70 95       	com	r23
    1de2:	7d bd       	out	0x2d, r23	; 45
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT) == 0) ;
    1de4:	88 b7       	in	r24, 0x38	; 56
    1de6:	82 ff       	sbrs	r24, 2
    1de8:	fd cf       	rjmp	.-6      	; 0x1de4 <GPT_Delay_ms+0x1de>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    1dea:	88 b7       	in	r24, 0x38	; 56
    1dec:	84 60       	ori	r24, 0x04	; 4
    1dee:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER1_OVF_INT_BIT);
    1df0:	99 b7       	in	r25, 0x39	; 57
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 0f       	add	r24, r24
    1df6:	88 0f       	add	r24, r24
    1df8:	89 2b       	or	r24, r25
    1dfa:	89 bf       	out	0x39, r24	; 57
				return;
    1dfc:	28 c0       	rjmp	.+80     	; 0x1e4e <GPT_Delay_ms+0x248>
			default:break;
		}
		break;
		case GPT_TIMER_2:
		/* Disable Interrupts for Waiting Delay */
		*TIMERS_INT_MASK_REG &= (0x3FU);
    1dfe:	89 b7       	in	r24, 0x39	; 57
    1e00:	8f 73       	andi	r24, 0x3F	; 63
    1e02:	89 bf       	out	0x39, r24	; 57
		switch (Config_Ptr->Op_Mode) {
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	88 23       	and	r24, r24
    1e08:	91 f0       	breq	.+36     	; 0x1e2e <GPT_Delay_ms+0x228>
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	01 f5       	brne	.+64     	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_CTC_MODE:
				*TIMER2_CMP_REG = (uint8)Tmr_Counts;
    1e0e:	63 bd       	out	0x23, r22	; 35
				*TIMER2_CNTR_REG = 0x00U;
    1e10:	14 bc       	out	0x24, r1	; 36
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT) == 0) ;
    1e12:	08 b6       	in	r0, 0x38	; 56
    1e14:	07 fe       	sbrs	r0, 7
    1e16:	fd cf       	rjmp	.-6      	; 0x1e12 <GPT_Delay_ms+0x20c>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    1e18:	88 b7       	in	r24, 0x38	; 56
    1e1a:	80 68       	ori	r24, 0x80	; 128
    1e1c:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_CMP_INT_BIT);
    1e1e:	99 b7       	in	r25, 0x39	; 57
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	87 95       	ror	r24
    1e24:	88 27       	eor	r24, r24
    1e26:	87 95       	ror	r24
    1e28:	89 2b       	or	r24, r25
    1e2a:	89 bf       	out	0x39, r24	; 57
				return;
    1e2c:	10 c0       	rjmp	.+32     	; 0x1e4e <GPT_Delay_ms+0x248>
			case GPT_NORMAL_MODE:
				*TIMER2_CNTR_REG = 256U-(uint8)(Tmr_Counts);
    1e2e:	61 95       	neg	r22
    1e30:	64 bd       	out	0x24, r22	; 36
				while (READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT) == 0) ;
    1e32:	88 b7       	in	r24, 0x38	; 56
    1e34:	86 ff       	sbrs	r24, 6
    1e36:	fd cf       	rjmp	.-6      	; 0x1e32 <GPT_Delay_ms+0x22c>
				SET_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    1e38:	88 b7       	in	r24, 0x38	; 56
    1e3a:	80 64       	ori	r24, 0x40	; 64
    1e3c:	88 bf       	out	0x38, r24	; 56
				/* Re-set interrupt state */
				*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<TIMER2_OVF_INT_BIT);
    1e3e:	99 b7       	in	r25, 0x39	; 57
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	82 95       	swap	r24
    1e44:	88 0f       	add	r24, r24
    1e46:	88 0f       	add	r24, r24
    1e48:	80 7c       	andi	r24, 0xC0	; 192
    1e4a:	89 2b       	or	r24, r25
    1e4c:	89 bf       	out	0x39, r24	; 57
			default:break;
		}
		break;
		default: break;
	}
}
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <GPT_GetTimerStatus>:

GPT_StatusType GPT_GetTimerStatus(const GPT_ConfigurationType* Config_Ptr) {
    1e54:	fc 01       	movw	r30, r24
	switch (Config_Ptr->Tmr_Channel) {
    1e56:	80 81       	ld	r24, Z
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	91 f0       	breq	.+36     	; 0x1e80 <GPT_GetTimerStatus+0x2c>
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	18 f0       	brcs	.+6      	; 0x1e66 <GPT_GetTimerStatus+0x12>
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	81 f5       	brne	.+96     	; 0x1ec4 <GPT_GetTimerStatus+0x70>
    1e64:	1d c0       	rjmp	.+58     	; 0x1ea0 <GPT_GetTimerStatus+0x4c>
		case GPT_TIMER_0:
			switch (Config_Ptr->Op_Mode) {
    1e66:	81 81       	ldd	r24, Z+1	; 0x01
    1e68:	88 23       	and	r24, r24
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <GPT_GetTimerStatus+0x1e>
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	41 f4       	brne	.+16     	; 0x1e80 <GPT_GetTimerStatus+0x2c>
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <GPT_GetTimerStatus+0x24>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_OVF_INT_BIT);
    1e72:	88 b7       	in	r24, 0x38	; 56
    1e74:	81 70       	andi	r24, 0x01	; 1
    1e76:	08 95       	ret
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER0_CMP_INT_BIT);
    1e78:	88 b7       	in	r24, 0x38	; 56
    1e7a:	86 95       	lsr	r24
    1e7c:	81 70       	andi	r24, 0x01	; 1
    1e7e:	08 95       	ret
				default: break;
			}
		case GPT_TIMER_1:
			switch (Config_Ptr->Op_Mode) {
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	88 23       	and	r24, r24
    1e84:	19 f0       	breq	.+6      	; 0x1e8c <GPT_GetTimerStatus+0x38>
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	59 f4       	brne	.+22     	; 0x1ea0 <GPT_GetTimerStatus+0x4c>
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <GPT_GetTimerStatus+0x42>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_OVF_INT_BIT);
    1e8c:	88 b7       	in	r24, 0x38	; 56
    1e8e:	86 95       	lsr	r24
    1e90:	86 95       	lsr	r24
    1e92:	81 70       	andi	r24, 0x01	; 1
    1e94:	08 95       	ret
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER1_CMP_A_INT_BIT);
    1e96:	88 b7       	in	r24, 0x38	; 56
    1e98:	82 95       	swap	r24
    1e9a:	8f 70       	andi	r24, 0x0F	; 15
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	08 95       	ret
				default: break;
			}
		case GPT_TIMER_2:
			switch (Config_Ptr->Op_Mode) {
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	88 23       	and	r24, r24
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <GPT_GetTimerStatus+0x58>
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	79 f4       	brne	.+30     	; 0x1ec8 <GPT_GetTimerStatus+0x74>
    1eaa:	07 c0       	rjmp	.+14     	; 0x1eba <GPT_GetTimerStatus+0x66>
				case GPT_NORMAL_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_OVF_INT_BIT);
    1eac:	88 b7       	in	r24, 0x38	; 56
    1eae:	82 95       	swap	r24
    1eb0:	86 95       	lsr	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	83 70       	andi	r24, 0x03	; 3
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	08 95       	ret
				case GPT_CTC_MODE:
					return READ_BIT(*TIMERS_INT_FLAG_REG, TIMER2_CMP_INT_BIT);
    1eba:	88 b7       	in	r24, 0x38	; 56
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	88 27       	eor	r24, r24
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	08 95       	ret
				default: break;
			}
		default: break;
	}
	return GPT_TIMER_FINISHED;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	08 95       	ret
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
}
    1eca:	08 95       	ret

00001ecc <__lshrdi3>:
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	60 97       	sbiw	r28, 0x10	; 16
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	00 23       	and	r16, r16
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__lshrdi3+0x24>
    1eee:	5a c0       	rjmp	.+180    	; 0x1fa4 <__lshrdi3+0xd8>
    1ef0:	29 87       	std	Y+9, r18	; 0x09
    1ef2:	3a 87       	std	Y+10, r19	; 0x0a
    1ef4:	4b 87       	std	Y+11, r20	; 0x0b
    1ef6:	5c 87       	std	Y+12, r21	; 0x0c
    1ef8:	6d 87       	std	Y+13, r22	; 0x0d
    1efa:	7e 87       	std	Y+14, r23	; 0x0e
    1efc:	8f 87       	std	Y+15, r24	; 0x0f
    1efe:	98 8b       	std	Y+16, r25	; 0x10
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	80 1b       	sub	r24, r16
    1f04:	4d 85       	ldd	r20, Y+13	; 0x0d
    1f06:	5e 85       	ldd	r21, Y+14	; 0x0e
    1f08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f0a:	78 89       	ldd	r23, Y+16	; 0x10
    1f0c:	18 16       	cp	r1, r24
    1f0e:	b4 f0       	brlt	.+44     	; 0x1f3c <__lshrdi3+0x70>
    1f10:	1d 82       	std	Y+5, r1	; 0x05
    1f12:	1e 82       	std	Y+6, r1	; 0x06
    1f14:	1f 82       	std	Y+7, r1	; 0x07
    1f16:	18 86       	std	Y+8, r1	; 0x08
    1f18:	99 27       	eor	r25, r25
    1f1a:	87 fd       	sbrc	r24, 7
    1f1c:	90 95       	com	r25
    1f1e:	90 95       	com	r25
    1f20:	81 95       	neg	r24
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <__lshrdi3+0x62>
    1f26:	76 95       	lsr	r23
    1f28:	67 95       	ror	r22
    1f2a:	57 95       	ror	r21
    1f2c:	47 95       	ror	r20
    1f2e:	8a 95       	dec	r24
    1f30:	d2 f7       	brpl	.-12     	; 0x1f26 <__lshrdi3+0x5a>
    1f32:	49 83       	std	Y+1, r20	; 0x01
    1f34:	5a 83       	std	Y+2, r21	; 0x02
    1f36:	6b 83       	std	Y+3, r22	; 0x03
    1f38:	7c 83       	std	Y+4, r23	; 0x04
    1f3a:	2c c0       	rjmp	.+88     	; 0x1f94 <__lshrdi3+0xc8>
    1f3c:	6a 01       	movw	r12, r20
    1f3e:	7b 01       	movw	r14, r22
    1f40:	00 2e       	mov	r0, r16
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <__lshrdi3+0x80>
    1f44:	f6 94       	lsr	r15
    1f46:	e7 94       	ror	r14
    1f48:	d7 94       	ror	r13
    1f4a:	c7 94       	ror	r12
    1f4c:	0a 94       	dec	r0
    1f4e:	d2 f7       	brpl	.-12     	; 0x1f44 <__lshrdi3+0x78>
    1f50:	cd 82       	std	Y+5, r12	; 0x05
    1f52:	de 82       	std	Y+6, r13	; 0x06
    1f54:	ef 82       	std	Y+7, r14	; 0x07
    1f56:	f8 86       	std	Y+8, r15	; 0x08
    1f58:	6a 01       	movw	r12, r20
    1f5a:	7b 01       	movw	r14, r22
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <__lshrdi3+0x9a>
    1f5e:	cc 0c       	add	r12, r12
    1f60:	dd 1c       	adc	r13, r13
    1f62:	ee 1c       	adc	r14, r14
    1f64:	ff 1c       	adc	r15, r15
    1f66:	8a 95       	dec	r24
    1f68:	d2 f7       	brpl	.-12     	; 0x1f5e <__lshrdi3+0x92>
    1f6a:	d7 01       	movw	r26, r14
    1f6c:	c6 01       	movw	r24, r12
    1f6e:	49 85       	ldd	r20, Y+9	; 0x09
    1f70:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <__lshrdi3+0xb4>
    1f78:	76 95       	lsr	r23
    1f7a:	67 95       	ror	r22
    1f7c:	57 95       	ror	r21
    1f7e:	47 95       	ror	r20
    1f80:	0a 95       	dec	r16
    1f82:	d2 f7       	brpl	.-12     	; 0x1f78 <__lshrdi3+0xac>
    1f84:	84 2b       	or	r24, r20
    1f86:	95 2b       	or	r25, r21
    1f88:	a6 2b       	or	r26, r22
    1f8a:	b7 2b       	or	r27, r23
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	ab 83       	std	Y+3, r26	; 0x03
    1f92:	bc 83       	std	Y+4, r27	; 0x04
    1f94:	29 81       	ldd	r18, Y+1	; 0x01
    1f96:	3a 81       	ldd	r19, Y+2	; 0x02
    1f98:	4b 81       	ldd	r20, Y+3	; 0x03
    1f9a:	5c 81       	ldd	r21, Y+4	; 0x04
    1f9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	98 85       	ldd	r25, Y+8	; 0x08
    1fa4:	60 96       	adiw	r28, 0x10	; 16
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	08 95       	ret

00001fc0 <__subsf3>:
    1fc0:	50 58       	subi	r21, 0x80	; 128

00001fc2 <__addsf3>:
    1fc2:	bb 27       	eor	r27, r27
    1fc4:	aa 27       	eor	r26, r26
    1fc6:	0e d0       	rcall	.+28     	; 0x1fe4 <__addsf3x>
    1fc8:	48 c1       	rjmp	.+656    	; 0x225a <__fp_round>
    1fca:	39 d1       	rcall	.+626    	; 0x223e <__fp_pscA>
    1fcc:	30 f0       	brcs	.+12     	; 0x1fda <__addsf3+0x18>
    1fce:	3e d1       	rcall	.+636    	; 0x224c <__fp_pscB>
    1fd0:	20 f0       	brcs	.+8      	; 0x1fda <__addsf3+0x18>
    1fd2:	31 f4       	brne	.+12     	; 0x1fe0 <__addsf3+0x1e>
    1fd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <__addsf3+0x1a>
    1fd8:	1e f4       	brtc	.+6      	; 0x1fe0 <__addsf3+0x1e>
    1fda:	2e c1       	rjmp	.+604    	; 0x2238 <__fp_nan>
    1fdc:	0e f4       	brtc	.+2      	; 0x1fe0 <__addsf3+0x1e>
    1fde:	e0 95       	com	r30
    1fe0:	e7 fb       	bst	r30, 7
    1fe2:	24 c1       	rjmp	.+584    	; 0x222c <__fp_inf>

00001fe4 <__addsf3x>:
    1fe4:	e9 2f       	mov	r30, r25
    1fe6:	4a d1       	rcall	.+660    	; 0x227c <__fp_split3>
    1fe8:	80 f3       	brcs	.-32     	; 0x1fca <__addsf3+0x8>
    1fea:	ba 17       	cp	r27, r26
    1fec:	62 07       	cpc	r22, r18
    1fee:	73 07       	cpc	r23, r19
    1ff0:	84 07       	cpc	r24, r20
    1ff2:	95 07       	cpc	r25, r21
    1ff4:	18 f0       	brcs	.+6      	; 0x1ffc <__addsf3x+0x18>
    1ff6:	71 f4       	brne	.+28     	; 0x2014 <__addsf3x+0x30>
    1ff8:	9e f5       	brtc	.+102    	; 0x2060 <__addsf3x+0x7c>
    1ffa:	62 c1       	rjmp	.+708    	; 0x22c0 <__fp_zero>
    1ffc:	0e f4       	brtc	.+2      	; 0x2000 <__addsf3x+0x1c>
    1ffe:	e0 95       	com	r30
    2000:	0b 2e       	mov	r0, r27
    2002:	ba 2f       	mov	r27, r26
    2004:	a0 2d       	mov	r26, r0
    2006:	0b 01       	movw	r0, r22
    2008:	b9 01       	movw	r22, r18
    200a:	90 01       	movw	r18, r0
    200c:	0c 01       	movw	r0, r24
    200e:	ca 01       	movw	r24, r20
    2010:	a0 01       	movw	r20, r0
    2012:	11 24       	eor	r1, r1
    2014:	ff 27       	eor	r31, r31
    2016:	59 1b       	sub	r21, r25
    2018:	99 f0       	breq	.+38     	; 0x2040 <__addsf3x+0x5c>
    201a:	59 3f       	cpi	r21, 0xF9	; 249
    201c:	50 f4       	brcc	.+20     	; 0x2032 <__addsf3x+0x4e>
    201e:	50 3e       	cpi	r21, 0xE0	; 224
    2020:	68 f1       	brcs	.+90     	; 0x207c <__addsf3x+0x98>
    2022:	1a 16       	cp	r1, r26
    2024:	f0 40       	sbci	r31, 0x00	; 0
    2026:	a2 2f       	mov	r26, r18
    2028:	23 2f       	mov	r18, r19
    202a:	34 2f       	mov	r19, r20
    202c:	44 27       	eor	r20, r20
    202e:	58 5f       	subi	r21, 0xF8	; 248
    2030:	f3 cf       	rjmp	.-26     	; 0x2018 <__addsf3x+0x34>
    2032:	46 95       	lsr	r20
    2034:	37 95       	ror	r19
    2036:	27 95       	ror	r18
    2038:	a7 95       	ror	r26
    203a:	f0 40       	sbci	r31, 0x00	; 0
    203c:	53 95       	inc	r21
    203e:	c9 f7       	brne	.-14     	; 0x2032 <__addsf3x+0x4e>
    2040:	7e f4       	brtc	.+30     	; 0x2060 <__addsf3x+0x7c>
    2042:	1f 16       	cp	r1, r31
    2044:	ba 0b       	sbc	r27, r26
    2046:	62 0b       	sbc	r22, r18
    2048:	73 0b       	sbc	r23, r19
    204a:	84 0b       	sbc	r24, r20
    204c:	ba f0       	brmi	.+46     	; 0x207c <__addsf3x+0x98>
    204e:	91 50       	subi	r25, 0x01	; 1
    2050:	a1 f0       	breq	.+40     	; 0x207a <__addsf3x+0x96>
    2052:	ff 0f       	add	r31, r31
    2054:	bb 1f       	adc	r27, r27
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	88 1f       	adc	r24, r24
    205c:	c2 f7       	brpl	.-16     	; 0x204e <__addsf3x+0x6a>
    205e:	0e c0       	rjmp	.+28     	; 0x207c <__addsf3x+0x98>
    2060:	ba 0f       	add	r27, r26
    2062:	62 1f       	adc	r22, r18
    2064:	73 1f       	adc	r23, r19
    2066:	84 1f       	adc	r24, r20
    2068:	48 f4       	brcc	.+18     	; 0x207c <__addsf3x+0x98>
    206a:	87 95       	ror	r24
    206c:	77 95       	ror	r23
    206e:	67 95       	ror	r22
    2070:	b7 95       	ror	r27
    2072:	f7 95       	ror	r31
    2074:	9e 3f       	cpi	r25, 0xFE	; 254
    2076:	08 f0       	brcs	.+2      	; 0x207a <__addsf3x+0x96>
    2078:	b3 cf       	rjmp	.-154    	; 0x1fe0 <__addsf3+0x1e>
    207a:	93 95       	inc	r25
    207c:	88 0f       	add	r24, r24
    207e:	08 f0       	brcs	.+2      	; 0x2082 <__addsf3x+0x9e>
    2080:	99 27       	eor	r25, r25
    2082:	ee 0f       	add	r30, r30
    2084:	97 95       	ror	r25
    2086:	87 95       	ror	r24
    2088:	08 95       	ret

0000208a <__divsf3>:
    208a:	0c d0       	rcall	.+24     	; 0x20a4 <__divsf3x>
    208c:	e6 c0       	rjmp	.+460    	; 0x225a <__fp_round>
    208e:	de d0       	rcall	.+444    	; 0x224c <__fp_pscB>
    2090:	40 f0       	brcs	.+16     	; 0x20a2 <__divsf3+0x18>
    2092:	d5 d0       	rcall	.+426    	; 0x223e <__fp_pscA>
    2094:	30 f0       	brcs	.+12     	; 0x20a2 <__divsf3+0x18>
    2096:	21 f4       	brne	.+8      	; 0x20a0 <__divsf3+0x16>
    2098:	5f 3f       	cpi	r21, 0xFF	; 255
    209a:	19 f0       	breq	.+6      	; 0x20a2 <__divsf3+0x18>
    209c:	c7 c0       	rjmp	.+398    	; 0x222c <__fp_inf>
    209e:	51 11       	cpse	r21, r1
    20a0:	10 c1       	rjmp	.+544    	; 0x22c2 <__fp_szero>
    20a2:	ca c0       	rjmp	.+404    	; 0x2238 <__fp_nan>

000020a4 <__divsf3x>:
    20a4:	eb d0       	rcall	.+470    	; 0x227c <__fp_split3>
    20a6:	98 f3       	brcs	.-26     	; 0x208e <__divsf3+0x4>

000020a8 <__divsf3_pse>:
    20a8:	99 23       	and	r25, r25
    20aa:	c9 f3       	breq	.-14     	; 0x209e <__divsf3+0x14>
    20ac:	55 23       	and	r21, r21
    20ae:	b1 f3       	breq	.-20     	; 0x209c <__divsf3+0x12>
    20b0:	95 1b       	sub	r25, r21
    20b2:	55 0b       	sbc	r21, r21
    20b4:	bb 27       	eor	r27, r27
    20b6:	aa 27       	eor	r26, r26
    20b8:	62 17       	cp	r22, r18
    20ba:	73 07       	cpc	r23, r19
    20bc:	84 07       	cpc	r24, r20
    20be:	38 f0       	brcs	.+14     	; 0x20ce <__divsf3_pse+0x26>
    20c0:	9f 5f       	subi	r25, 0xFF	; 255
    20c2:	5f 4f       	sbci	r21, 0xFF	; 255
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	44 1f       	adc	r20, r20
    20ca:	aa 1f       	adc	r26, r26
    20cc:	a9 f3       	breq	.-22     	; 0x20b8 <__divsf3_pse+0x10>
    20ce:	33 d0       	rcall	.+102    	; 0x2136 <__divsf3_pse+0x8e>
    20d0:	0e 2e       	mov	r0, r30
    20d2:	3a f0       	brmi	.+14     	; 0x20e2 <__divsf3_pse+0x3a>
    20d4:	e0 e8       	ldi	r30, 0x80	; 128
    20d6:	30 d0       	rcall	.+96     	; 0x2138 <__divsf3_pse+0x90>
    20d8:	91 50       	subi	r25, 0x01	; 1
    20da:	50 40       	sbci	r21, 0x00	; 0
    20dc:	e6 95       	lsr	r30
    20de:	00 1c       	adc	r0, r0
    20e0:	ca f7       	brpl	.-14     	; 0x20d4 <__divsf3_pse+0x2c>
    20e2:	29 d0       	rcall	.+82     	; 0x2136 <__divsf3_pse+0x8e>
    20e4:	fe 2f       	mov	r31, r30
    20e6:	27 d0       	rcall	.+78     	; 0x2136 <__divsf3_pse+0x8e>
    20e8:	66 0f       	add	r22, r22
    20ea:	77 1f       	adc	r23, r23
    20ec:	88 1f       	adc	r24, r24
    20ee:	bb 1f       	adc	r27, r27
    20f0:	26 17       	cp	r18, r22
    20f2:	37 07       	cpc	r19, r23
    20f4:	48 07       	cpc	r20, r24
    20f6:	ab 07       	cpc	r26, r27
    20f8:	b0 e8       	ldi	r27, 0x80	; 128
    20fa:	09 f0       	breq	.+2      	; 0x20fe <__divsf3_pse+0x56>
    20fc:	bb 0b       	sbc	r27, r27
    20fe:	80 2d       	mov	r24, r0
    2100:	bf 01       	movw	r22, r30
    2102:	ff 27       	eor	r31, r31
    2104:	93 58       	subi	r25, 0x83	; 131
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	2a f0       	brmi	.+10     	; 0x2114 <__divsf3_pse+0x6c>
    210a:	9e 3f       	cpi	r25, 0xFE	; 254
    210c:	51 05       	cpc	r21, r1
    210e:	68 f0       	brcs	.+26     	; 0x212a <__divsf3_pse+0x82>
    2110:	8d c0       	rjmp	.+282    	; 0x222c <__fp_inf>
    2112:	d7 c0       	rjmp	.+430    	; 0x22c2 <__fp_szero>
    2114:	5f 3f       	cpi	r21, 0xFF	; 255
    2116:	ec f3       	brlt	.-6      	; 0x2112 <__divsf3_pse+0x6a>
    2118:	98 3e       	cpi	r25, 0xE8	; 232
    211a:	dc f3       	brlt	.-10     	; 0x2112 <__divsf3_pse+0x6a>
    211c:	86 95       	lsr	r24
    211e:	77 95       	ror	r23
    2120:	67 95       	ror	r22
    2122:	b7 95       	ror	r27
    2124:	f7 95       	ror	r31
    2126:	9f 5f       	subi	r25, 0xFF	; 255
    2128:	c9 f7       	brne	.-14     	; 0x211c <__divsf3_pse+0x74>
    212a:	88 0f       	add	r24, r24
    212c:	91 1d       	adc	r25, r1
    212e:	96 95       	lsr	r25
    2130:	87 95       	ror	r24
    2132:	97 f9       	bld	r25, 7
    2134:	08 95       	ret
    2136:	e1 e0       	ldi	r30, 0x01	; 1
    2138:	66 0f       	add	r22, r22
    213a:	77 1f       	adc	r23, r23
    213c:	88 1f       	adc	r24, r24
    213e:	bb 1f       	adc	r27, r27
    2140:	62 17       	cp	r22, r18
    2142:	73 07       	cpc	r23, r19
    2144:	84 07       	cpc	r24, r20
    2146:	ba 07       	cpc	r27, r26
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__divsf3_pse+0xaa>
    214a:	62 1b       	sub	r22, r18
    214c:	73 0b       	sbc	r23, r19
    214e:	84 0b       	sbc	r24, r20
    2150:	ba 0b       	sbc	r27, r26
    2152:	ee 1f       	adc	r30, r30
    2154:	88 f7       	brcc	.-30     	; 0x2138 <__divsf3_pse+0x90>
    2156:	e0 95       	com	r30
    2158:	08 95       	ret

0000215a <__fixunssfsi>:
    215a:	98 d0       	rcall	.+304    	; 0x228c <__fp_splitA>
    215c:	88 f0       	brcs	.+34     	; 0x2180 <__fixunssfsi+0x26>
    215e:	9f 57       	subi	r25, 0x7F	; 127
    2160:	90 f0       	brcs	.+36     	; 0x2186 <__fixunssfsi+0x2c>
    2162:	b9 2f       	mov	r27, r25
    2164:	99 27       	eor	r25, r25
    2166:	b7 51       	subi	r27, 0x17	; 23
    2168:	a0 f0       	brcs	.+40     	; 0x2192 <__fixunssfsi+0x38>
    216a:	d1 f0       	breq	.+52     	; 0x21a0 <__fixunssfsi+0x46>
    216c:	66 0f       	add	r22, r22
    216e:	77 1f       	adc	r23, r23
    2170:	88 1f       	adc	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	1a f0       	brmi	.+6      	; 0x217c <__fixunssfsi+0x22>
    2176:	ba 95       	dec	r27
    2178:	c9 f7       	brne	.-14     	; 0x216c <__fixunssfsi+0x12>
    217a:	12 c0       	rjmp	.+36     	; 0x21a0 <__fixunssfsi+0x46>
    217c:	b1 30       	cpi	r27, 0x01	; 1
    217e:	81 f0       	breq	.+32     	; 0x21a0 <__fixunssfsi+0x46>
    2180:	9f d0       	rcall	.+318    	; 0x22c0 <__fp_zero>
    2182:	b1 e0       	ldi	r27, 0x01	; 1
    2184:	08 95       	ret
    2186:	9c c0       	rjmp	.+312    	; 0x22c0 <__fp_zero>
    2188:	67 2f       	mov	r22, r23
    218a:	78 2f       	mov	r23, r24
    218c:	88 27       	eor	r24, r24
    218e:	b8 5f       	subi	r27, 0xF8	; 248
    2190:	39 f0       	breq	.+14     	; 0x21a0 <__fixunssfsi+0x46>
    2192:	b9 3f       	cpi	r27, 0xF9	; 249
    2194:	cc f3       	brlt	.-14     	; 0x2188 <__fixunssfsi+0x2e>
    2196:	86 95       	lsr	r24
    2198:	77 95       	ror	r23
    219a:	67 95       	ror	r22
    219c:	b3 95       	inc	r27
    219e:	d9 f7       	brne	.-10     	; 0x2196 <__fixunssfsi+0x3c>
    21a0:	3e f4       	brtc	.+14     	; 0x21b0 <__fixunssfsi+0x56>
    21a2:	90 95       	com	r25
    21a4:	80 95       	com	r24
    21a6:	70 95       	com	r23
    21a8:	61 95       	neg	r22
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	8f 4f       	sbci	r24, 0xFF	; 255
    21ae:	9f 4f       	sbci	r25, 0xFF	; 255
    21b0:	08 95       	ret

000021b2 <__floatunsisf>:
    21b2:	e8 94       	clt
    21b4:	09 c0       	rjmp	.+18     	; 0x21c8 <__floatsisf+0x12>

000021b6 <__floatsisf>:
    21b6:	97 fb       	bst	r25, 7
    21b8:	3e f4       	brtc	.+14     	; 0x21c8 <__floatsisf+0x12>
    21ba:	90 95       	com	r25
    21bc:	80 95       	com	r24
    21be:	70 95       	com	r23
    21c0:	61 95       	neg	r22
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	8f 4f       	sbci	r24, 0xFF	; 255
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	99 23       	and	r25, r25
    21ca:	a9 f0       	breq	.+42     	; 0x21f6 <__floatsisf+0x40>
    21cc:	f9 2f       	mov	r31, r25
    21ce:	96 e9       	ldi	r25, 0x96	; 150
    21d0:	bb 27       	eor	r27, r27
    21d2:	93 95       	inc	r25
    21d4:	f6 95       	lsr	r31
    21d6:	87 95       	ror	r24
    21d8:	77 95       	ror	r23
    21da:	67 95       	ror	r22
    21dc:	b7 95       	ror	r27
    21de:	f1 11       	cpse	r31, r1
    21e0:	f8 cf       	rjmp	.-16     	; 0x21d2 <__floatsisf+0x1c>
    21e2:	fa f4       	brpl	.+62     	; 0x2222 <__floatsisf+0x6c>
    21e4:	bb 0f       	add	r27, r27
    21e6:	11 f4       	brne	.+4      	; 0x21ec <__floatsisf+0x36>
    21e8:	60 ff       	sbrs	r22, 0
    21ea:	1b c0       	rjmp	.+54     	; 0x2222 <__floatsisf+0x6c>
    21ec:	6f 5f       	subi	r22, 0xFF	; 255
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <__floatsisf+0x6c>
    21f6:	88 23       	and	r24, r24
    21f8:	11 f0       	breq	.+4      	; 0x21fe <__floatsisf+0x48>
    21fa:	96 e9       	ldi	r25, 0x96	; 150
    21fc:	11 c0       	rjmp	.+34     	; 0x2220 <__floatsisf+0x6a>
    21fe:	77 23       	and	r23, r23
    2200:	21 f0       	breq	.+8      	; 0x220a <__floatsisf+0x54>
    2202:	9e e8       	ldi	r25, 0x8E	; 142
    2204:	87 2f       	mov	r24, r23
    2206:	76 2f       	mov	r23, r22
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <__floatsisf+0x5e>
    220a:	66 23       	and	r22, r22
    220c:	71 f0       	breq	.+28     	; 0x222a <__floatsisf+0x74>
    220e:	96 e8       	ldi	r25, 0x86	; 134
    2210:	86 2f       	mov	r24, r22
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	2a f0       	brmi	.+10     	; 0x2222 <__floatsisf+0x6c>
    2218:	9a 95       	dec	r25
    221a:	66 0f       	add	r22, r22
    221c:	77 1f       	adc	r23, r23
    221e:	88 1f       	adc	r24, r24
    2220:	da f7       	brpl	.-10     	; 0x2218 <__floatsisf+0x62>
    2222:	88 0f       	add	r24, r24
    2224:	96 95       	lsr	r25
    2226:	87 95       	ror	r24
    2228:	97 f9       	bld	r25, 7
    222a:	08 95       	ret

0000222c <__fp_inf>:
    222c:	97 f9       	bld	r25, 7
    222e:	9f 67       	ori	r25, 0x7F	; 127
    2230:	80 e8       	ldi	r24, 0x80	; 128
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	08 95       	ret

00002238 <__fp_nan>:
    2238:	9f ef       	ldi	r25, 0xFF	; 255
    223a:	80 ec       	ldi	r24, 0xC0	; 192
    223c:	08 95       	ret

0000223e <__fp_pscA>:
    223e:	00 24       	eor	r0, r0
    2240:	0a 94       	dec	r0
    2242:	16 16       	cp	r1, r22
    2244:	17 06       	cpc	r1, r23
    2246:	18 06       	cpc	r1, r24
    2248:	09 06       	cpc	r0, r25
    224a:	08 95       	ret

0000224c <__fp_pscB>:
    224c:	00 24       	eor	r0, r0
    224e:	0a 94       	dec	r0
    2250:	12 16       	cp	r1, r18
    2252:	13 06       	cpc	r1, r19
    2254:	14 06       	cpc	r1, r20
    2256:	05 06       	cpc	r0, r21
    2258:	08 95       	ret

0000225a <__fp_round>:
    225a:	09 2e       	mov	r0, r25
    225c:	03 94       	inc	r0
    225e:	00 0c       	add	r0, r0
    2260:	11 f4       	brne	.+4      	; 0x2266 <__fp_round+0xc>
    2262:	88 23       	and	r24, r24
    2264:	52 f0       	brmi	.+20     	; 0x227a <__fp_round+0x20>
    2266:	bb 0f       	add	r27, r27
    2268:	40 f4       	brcc	.+16     	; 0x227a <__fp_round+0x20>
    226a:	bf 2b       	or	r27, r31
    226c:	11 f4       	brne	.+4      	; 0x2272 <__fp_round+0x18>
    226e:	60 ff       	sbrs	r22, 0
    2270:	04 c0       	rjmp	.+8      	; 0x227a <__fp_round+0x20>
    2272:	6f 5f       	subi	r22, 0xFF	; 255
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	08 95       	ret

0000227c <__fp_split3>:
    227c:	57 fd       	sbrc	r21, 7
    227e:	90 58       	subi	r25, 0x80	; 128
    2280:	44 0f       	add	r20, r20
    2282:	55 1f       	adc	r21, r21
    2284:	59 f0       	breq	.+22     	; 0x229c <__fp_splitA+0x10>
    2286:	5f 3f       	cpi	r21, 0xFF	; 255
    2288:	71 f0       	breq	.+28     	; 0x22a6 <__fp_splitA+0x1a>
    228a:	47 95       	ror	r20

0000228c <__fp_splitA>:
    228c:	88 0f       	add	r24, r24
    228e:	97 fb       	bst	r25, 7
    2290:	99 1f       	adc	r25, r25
    2292:	61 f0       	breq	.+24     	; 0x22ac <__fp_splitA+0x20>
    2294:	9f 3f       	cpi	r25, 0xFF	; 255
    2296:	79 f0       	breq	.+30     	; 0x22b6 <__fp_splitA+0x2a>
    2298:	87 95       	ror	r24
    229a:	08 95       	ret
    229c:	12 16       	cp	r1, r18
    229e:	13 06       	cpc	r1, r19
    22a0:	14 06       	cpc	r1, r20
    22a2:	55 1f       	adc	r21, r21
    22a4:	f2 cf       	rjmp	.-28     	; 0x228a <__fp_split3+0xe>
    22a6:	46 95       	lsr	r20
    22a8:	f1 df       	rcall	.-30     	; 0x228c <__fp_splitA>
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <__fp_splitA+0x30>
    22ac:	16 16       	cp	r1, r22
    22ae:	17 06       	cpc	r1, r23
    22b0:	18 06       	cpc	r1, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	f1 cf       	rjmp	.-30     	; 0x2298 <__fp_splitA+0xc>
    22b6:	86 95       	lsr	r24
    22b8:	71 05       	cpc	r23, r1
    22ba:	61 05       	cpc	r22, r1
    22bc:	08 94       	sec
    22be:	08 95       	ret

000022c0 <__fp_zero>:
    22c0:	e8 94       	clt

000022c2 <__fp_szero>:
    22c2:	bb 27       	eor	r27, r27
    22c4:	66 27       	eor	r22, r22
    22c6:	77 27       	eor	r23, r23
    22c8:	cb 01       	movw	r24, r22
    22ca:	97 f9       	bld	r25, 7
    22cc:	08 95       	ret

000022ce <__mulsf3>:
    22ce:	0b d0       	rcall	.+22     	; 0x22e6 <__mulsf3x>
    22d0:	c4 cf       	rjmp	.-120    	; 0x225a <__fp_round>
    22d2:	b5 df       	rcall	.-150    	; 0x223e <__fp_pscA>
    22d4:	28 f0       	brcs	.+10     	; 0x22e0 <__mulsf3+0x12>
    22d6:	ba df       	rcall	.-140    	; 0x224c <__fp_pscB>
    22d8:	18 f0       	brcs	.+6      	; 0x22e0 <__mulsf3+0x12>
    22da:	95 23       	and	r25, r21
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <__mulsf3+0x12>
    22de:	a6 cf       	rjmp	.-180    	; 0x222c <__fp_inf>
    22e0:	ab cf       	rjmp	.-170    	; 0x2238 <__fp_nan>
    22e2:	11 24       	eor	r1, r1
    22e4:	ee cf       	rjmp	.-36     	; 0x22c2 <__fp_szero>

000022e6 <__mulsf3x>:
    22e6:	ca df       	rcall	.-108    	; 0x227c <__fp_split3>
    22e8:	a0 f3       	brcs	.-24     	; 0x22d2 <__mulsf3+0x4>

000022ea <__mulsf3_pse>:
    22ea:	95 9f       	mul	r25, r21
    22ec:	d1 f3       	breq	.-12     	; 0x22e2 <__mulsf3+0x14>
    22ee:	95 0f       	add	r25, r21
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	55 1f       	adc	r21, r21
    22f4:	62 9f       	mul	r22, r18
    22f6:	f0 01       	movw	r30, r0
    22f8:	72 9f       	mul	r23, r18
    22fa:	bb 27       	eor	r27, r27
    22fc:	f0 0d       	add	r31, r0
    22fe:	b1 1d       	adc	r27, r1
    2300:	63 9f       	mul	r22, r19
    2302:	aa 27       	eor	r26, r26
    2304:	f0 0d       	add	r31, r0
    2306:	b1 1d       	adc	r27, r1
    2308:	aa 1f       	adc	r26, r26
    230a:	64 9f       	mul	r22, r20
    230c:	66 27       	eor	r22, r22
    230e:	b0 0d       	add	r27, r0
    2310:	a1 1d       	adc	r26, r1
    2312:	66 1f       	adc	r22, r22
    2314:	82 9f       	mul	r24, r18
    2316:	22 27       	eor	r18, r18
    2318:	b0 0d       	add	r27, r0
    231a:	a1 1d       	adc	r26, r1
    231c:	62 1f       	adc	r22, r18
    231e:	73 9f       	mul	r23, r19
    2320:	b0 0d       	add	r27, r0
    2322:	a1 1d       	adc	r26, r1
    2324:	62 1f       	adc	r22, r18
    2326:	83 9f       	mul	r24, r19
    2328:	a0 0d       	add	r26, r0
    232a:	61 1d       	adc	r22, r1
    232c:	22 1f       	adc	r18, r18
    232e:	74 9f       	mul	r23, r20
    2330:	33 27       	eor	r19, r19
    2332:	a0 0d       	add	r26, r0
    2334:	61 1d       	adc	r22, r1
    2336:	23 1f       	adc	r18, r19
    2338:	84 9f       	mul	r24, r20
    233a:	60 0d       	add	r22, r0
    233c:	21 1d       	adc	r18, r1
    233e:	82 2f       	mov	r24, r18
    2340:	76 2f       	mov	r23, r22
    2342:	6a 2f       	mov	r22, r26
    2344:	11 24       	eor	r1, r1
    2346:	9f 57       	subi	r25, 0x7F	; 127
    2348:	50 40       	sbci	r21, 0x00	; 0
    234a:	8a f0       	brmi	.+34     	; 0x236e <__mulsf3_pse+0x84>
    234c:	e1 f0       	breq	.+56     	; 0x2386 <__mulsf3_pse+0x9c>
    234e:	88 23       	and	r24, r24
    2350:	4a f0       	brmi	.+18     	; 0x2364 <__mulsf3_pse+0x7a>
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	bb 1f       	adc	r27, r27
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	91 50       	subi	r25, 0x01	; 1
    2360:	50 40       	sbci	r21, 0x00	; 0
    2362:	a9 f7       	brne	.-22     	; 0x234e <__mulsf3_pse+0x64>
    2364:	9e 3f       	cpi	r25, 0xFE	; 254
    2366:	51 05       	cpc	r21, r1
    2368:	70 f0       	brcs	.+28     	; 0x2386 <__mulsf3_pse+0x9c>
    236a:	60 cf       	rjmp	.-320    	; 0x222c <__fp_inf>
    236c:	aa cf       	rjmp	.-172    	; 0x22c2 <__fp_szero>
    236e:	5f 3f       	cpi	r21, 0xFF	; 255
    2370:	ec f3       	brlt	.-6      	; 0x236c <__mulsf3_pse+0x82>
    2372:	98 3e       	cpi	r25, 0xE8	; 232
    2374:	dc f3       	brlt	.-10     	; 0x236c <__mulsf3_pse+0x82>
    2376:	86 95       	lsr	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	b7 95       	ror	r27
    237e:	f7 95       	ror	r31
    2380:	e7 95       	ror	r30
    2382:	9f 5f       	subi	r25, 0xFF	; 255
    2384:	c1 f7       	brne	.-16     	; 0x2376 <__mulsf3_pse+0x8c>
    2386:	fe 2b       	or	r31, r30
    2388:	88 0f       	add	r24, r24
    238a:	91 1d       	adc	r25, r1
    238c:	96 95       	lsr	r25
    238e:	87 95       	ror	r24
    2390:	97 f9       	bld	r25, 7
    2392:	08 95       	ret

00002394 <__mulsi3>:
    2394:	62 9f       	mul	r22, r18
    2396:	d0 01       	movw	r26, r0
    2398:	73 9f       	mul	r23, r19
    239a:	f0 01       	movw	r30, r0
    239c:	82 9f       	mul	r24, r18
    239e:	e0 0d       	add	r30, r0
    23a0:	f1 1d       	adc	r31, r1
    23a2:	64 9f       	mul	r22, r20
    23a4:	e0 0d       	add	r30, r0
    23a6:	f1 1d       	adc	r31, r1
    23a8:	92 9f       	mul	r25, r18
    23aa:	f0 0d       	add	r31, r0
    23ac:	83 9f       	mul	r24, r19
    23ae:	f0 0d       	add	r31, r0
    23b0:	74 9f       	mul	r23, r20
    23b2:	f0 0d       	add	r31, r0
    23b4:	65 9f       	mul	r22, r21
    23b6:	f0 0d       	add	r31, r0
    23b8:	99 27       	eor	r25, r25
    23ba:	72 9f       	mul	r23, r18
    23bc:	b0 0d       	add	r27, r0
    23be:	e1 1d       	adc	r30, r1
    23c0:	f9 1f       	adc	r31, r25
    23c2:	63 9f       	mul	r22, r19
    23c4:	b0 0d       	add	r27, r0
    23c6:	e1 1d       	adc	r30, r1
    23c8:	f9 1f       	adc	r31, r25
    23ca:	bd 01       	movw	r22, r26
    23cc:	cf 01       	movw	r24, r30
    23ce:	11 24       	eor	r1, r1
    23d0:	08 95       	ret

000023d2 <__divmodsi4>:
    23d2:	97 fb       	bst	r25, 7
    23d4:	09 2e       	mov	r0, r25
    23d6:	05 26       	eor	r0, r21
    23d8:	0e d0       	rcall	.+28     	; 0x23f6 <__divmodsi4_neg1>
    23da:	57 fd       	sbrc	r21, 7
    23dc:	04 d0       	rcall	.+8      	; 0x23e6 <__divmodsi4_neg2>
    23de:	14 d0       	rcall	.+40     	; 0x2408 <__udivmodsi4>
    23e0:	0a d0       	rcall	.+20     	; 0x23f6 <__divmodsi4_neg1>
    23e2:	00 1c       	adc	r0, r0
    23e4:	38 f4       	brcc	.+14     	; 0x23f4 <__divmodsi4_exit>

000023e6 <__divmodsi4_neg2>:
    23e6:	50 95       	com	r21
    23e8:	40 95       	com	r20
    23ea:	30 95       	com	r19
    23ec:	21 95       	neg	r18
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	4f 4f       	sbci	r20, 0xFF	; 255
    23f2:	5f 4f       	sbci	r21, 0xFF	; 255

000023f4 <__divmodsi4_exit>:
    23f4:	08 95       	ret

000023f6 <__divmodsi4_neg1>:
    23f6:	f6 f7       	brtc	.-4      	; 0x23f4 <__divmodsi4_exit>
    23f8:	90 95       	com	r25
    23fa:	80 95       	com	r24
    23fc:	70 95       	com	r23
    23fe:	61 95       	neg	r22
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	8f 4f       	sbci	r24, 0xFF	; 255
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	08 95       	ret

00002408 <__udivmodsi4>:
    2408:	a1 e2       	ldi	r26, 0x21	; 33
    240a:	1a 2e       	mov	r1, r26
    240c:	aa 1b       	sub	r26, r26
    240e:	bb 1b       	sub	r27, r27
    2410:	fd 01       	movw	r30, r26
    2412:	0d c0       	rjmp	.+26     	; 0x242e <__udivmodsi4_ep>

00002414 <__udivmodsi4_loop>:
    2414:	aa 1f       	adc	r26, r26
    2416:	bb 1f       	adc	r27, r27
    2418:	ee 1f       	adc	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	a2 17       	cp	r26, r18
    241e:	b3 07       	cpc	r27, r19
    2420:	e4 07       	cpc	r30, r20
    2422:	f5 07       	cpc	r31, r21
    2424:	20 f0       	brcs	.+8      	; 0x242e <__udivmodsi4_ep>
    2426:	a2 1b       	sub	r26, r18
    2428:	b3 0b       	sbc	r27, r19
    242a:	e4 0b       	sbc	r30, r20
    242c:	f5 0b       	sbc	r31, r21

0000242e <__udivmodsi4_ep>:
    242e:	66 1f       	adc	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	88 1f       	adc	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	1a 94       	dec	r1
    2438:	69 f7       	brne	.-38     	; 0x2414 <__udivmodsi4_loop>
    243a:	60 95       	com	r22
    243c:	70 95       	com	r23
    243e:	80 95       	com	r24
    2440:	90 95       	com	r25
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	bd 01       	movw	r22, r26
    2448:	cf 01       	movw	r24, r30
    244a:	08 95       	ret

0000244c <puts>:
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	8c 01       	movw	r16, r24
    2456:	e0 91 1f 01 	lds	r30, 0x011F
    245a:	f0 91 20 01 	lds	r31, 0x0120
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	81 ff       	sbrs	r24, 1
    2462:	1a c0       	rjmp	.+52     	; 0x2498 <puts+0x4c>
    2464:	c0 e0       	ldi	r28, 0x00	; 0
    2466:	d0 e0       	ldi	r29, 0x00	; 0
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <puts+0x28>
    246a:	09 95       	icall
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	11 f0       	breq	.+4      	; 0x2474 <puts+0x28>
    2470:	cf ef       	ldi	r28, 0xFF	; 255
    2472:	df ef       	ldi	r29, 0xFF	; 255
    2474:	f8 01       	movw	r30, r16
    2476:	81 91       	ld	r24, Z+
    2478:	8f 01       	movw	r16, r30
    247a:	60 91 1f 01 	lds	r22, 0x011F
    247e:	70 91 20 01 	lds	r23, 0x0120
    2482:	db 01       	movw	r26, r22
    2484:	18 96       	adiw	r26, 0x08	; 8
    2486:	ed 91       	ld	r30, X+
    2488:	fc 91       	ld	r31, X
    248a:	19 97       	sbiw	r26, 0x09	; 9
    248c:	88 23       	and	r24, r24
    248e:	69 f7       	brne	.-38     	; 0x246a <puts+0x1e>
    2490:	8a e0       	ldi	r24, 0x0A	; 10
    2492:	09 95       	icall
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	11 f0       	breq	.+4      	; 0x249c <puts+0x50>
    2498:	cf ef       	ldi	r28, 0xFF	; 255
    249a:	df ef       	ldi	r29, 0xFF	; 255
    249c:	ce 01       	movw	r24, r28
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <_exit>:
    24a8:	f8 94       	cli

000024aa <__stop_program>:
    24aa:	ff cf       	rjmp	.-2      	; 0x24aa <__stop_program>
